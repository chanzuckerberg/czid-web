#!/usr/bin/env ruby

require 'rbconfig'
require 'rubygems'
require 'bundler/setup'
require 'pp'
require 'json'
require 'shellwords'

def system!(cmd, err = nil)
  system(cmd) || abort("\n== Command #{cmd} failed ==\n\n#{err}\n\n====")
end

env = ARGV.shift
image = ARGV.shift
cluster = if ["sandbox", "public"].include?(env)
            "idseq-#{env}-ecs"
          else
            # TODO(2020-01-23): Rename staging/prod clusters to new format (IDSEQ-2155).
            env
          end

if !env || !image
  puts 'Usage: ./bin/deploy ENV IMAGE_TAG'
  abort
end

if image == 'latest'
  puts "you should not deploy latest (it doesn't mean what you think it does)"
  abort
end

puts "deploying #{image} to #{env}"

def notify_slack(env, image, stage)
  slack_secret = JSON.parse(`aws secretsmanager get-secret-value --secret-id idseq/slack_hook`)
  slack_hook = slack_secret["SecretString"]
  if slack_hook
    if stage=="start"
      post_slack_message({"icon_emoji": ":ghost:",
                          "text": "starting to deploy #{image} to #{env}.\n" +
                              "   - refs: #{tags_and_branches(image).join(', ')}"
                         }, slack_hook)
    elsif stage=="end"
      post_slack_message({"icon_emoji": ":sharkdance:", "text": "finished deploying #{image} to #{env}"}, slack_hook)
      if env=="staging"
        begin
          definition_list = JSON.parse(`aws ecs list-task-definitions --family-prefix idseq-prod-web --sort DESC --max-items 1`)
          definition = JSON.parse(`aws ecs describe-task-definition --task-definition #{definition_list["taskDefinitionArns"][0]}`)
          prod_image = definition["taskDefinition"]["containerDefinitions"][0]["image"].split(':')[1]
          log_history = `git log --graph --pretty=format:'%an -%d %s (%cr) <%h>' --abbrev-commit #{prod_image.split('-')[1]}..#{image.split('-')[1]} | sort`
          post_slack_message({"icon_emoji": ":sharkdance:", "text": "Please test these changes:\n#{log_history}"}, slack_hook)
        rescue
        end
      end
    elsif stage=="failure"
      puts `curl -X POST --data-urlencode 'payload={"icon_emoji": ":sob:", "text": "deploy of #{image} to #{env} failed"}' #{slack_hook}`
    end
  else
    puts "Unable to get Slack hook from AWS Secrets Manager. Please check your configuration."
  end
end

def post_slack_message(payload, slack_hook)
  puts `curl -X POST --data-urlencode payload=#{Shellwords.escape(JSON.dump(payload))} #{slack_hook}`
end

def tags_and_branches(image)
  m = image.match(/^sha-([0-9a-f]{7,})$/)
  return unless m
  `git ls-remote --tags --heads origin | grep ^#{m.captures[0]} | cut -f 2` \
      .gsub(/\^\{\}$/m, '') \
      .gsub(/^refs\/heads\//m, 'origin/') \
      .gsub(/^refs\/tags\//m, '') \
      .split("\n")
end

notify_slack(env, image, "start")
begin
  os = RbConfig::CONFIG['host_os'] =~ /darwin/ ? 'darwin' : 'linux'
  system!("curl -L https://github.com/chanzuckerberg/czecs/releases/download/v0.1.1/czecs_0.1.1_#{os}_amd64.tar.gz | tar xz -C /tmp czecs")
  aws_account_id = `aws sts get-caller-identity --query="Account" | tr -d '\"'`.strip
  task_definition_arn = `/tmp/czecs register -f balances.json --set tag=#{image} --set env=#{env} --set account_id=#{aws_account_id} czecs.json`.strip
  $?.exitstatus == 0 || abort("\n== Could not register task ==\n")
  puts 'running migrations'
  system!("/tmp/czecs task -f balances.json --timeout 0 --set taskDefinitionArn=#{task_definition_arn} --set cluster=#{cluster} czecs-task-migrate.json")
  system!("/tmp/czecs upgrade --task-definition-arn #{task_definition_arn} #{cluster} idseq-#{env}-web")
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque --set rake_command=resque:workers --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque czecs-resque.json")
  unless ["sandbox", "public"].include?(env)
    system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque-pipeline-monitor --set rake_command=pipeline_monitor --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque-pipeline-monitor czecs-resque.json")
    system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque-result-monitor --set rake_command=result_monitor --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque-result-monitor czecs-resque.json")
  end
  notify_slack(env, image, "end")
rescue Exception  # Even on abort/SystemExit
  notify_slack(env, image, "failure")
  raise
ensure
  system!("rm -f /tmp/czecs")
end