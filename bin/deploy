#!/usr/bin/env ruby

require 'rbconfig'
require 'rubygems'
require 'bundler/setup'
require 'pp'
require 'json'
require 'shellwords'
require 'aws-sdk-iam'

def system!(cmd, err = nil)
  system(cmd) || abort("\n== Command #{cmd} failed ==\n\n#{err}\n\n====")
end

env = ARGV.shift
image = ARGV.shift
deployed_by = ARGV.shift
deployment_reason = ARGV.shift

aws_account_alias = JSON.parse(`aws iam list-account-aliases --output json --query "AccountAliases[0]"`)

cluster = if env == "sandbox" or aws_account_alias == "idseq-prod"
            "idseq-#{env}-ecs"
          else
            # TODO(2020-01-23): Rename staging clusters to new format (IDSEQ-2155).
            env
          end

if !env || !image
  puts 'Usage: ./bin/deploy ENV IMAGE_TAG YOUR_NAME'
  abort
end

if image == 'latest'
  puts "you should not deploy latest (it doesn't mean what you think it does)"
  abort
end

puts "deploying #{image} to #{env}"

def notify_slack(env, image, stage, deployed_by = nil, deployment_reason = nil)
  slack_secret = JSON.parse(`aws secretsmanager get-secret-value --secret-id idseq/slack_hook`)
  slack_hook = slack_secret["SecretString"]
  if slack_hook
    if stage=="start"
      refs = tags_and_branches(image).join(', ')
      message = prepare_deploy_starting_slack_message(image, env, deployed_by, deployment_reason, refs)
      post_slack_message(message, slack_hook)
    elsif stage=="end"
      message = prepare_simple_slack_message("Finished deploying #{image} to #{env}.")
      post_slack_message(message, slack_hook)
      if env=="staging"
        message = prepare_simple_slack_message("Please test your changes listed at https://go.czi.team/idseq-release-checkoff")
        post_slack_message(message, slack_hook)
      end
    elsif stage=="failure"
      message = prepare_simple_slack_message("Deploy of #{image} to #{env} failed.")
      post_slack_message(message, slack_hook)
    end
  else
    puts "Unable to get Slack hook from AWS Secrets Manager. Please check your configuration."
  end
end

def prepare_simple_slack_message(text)
  {
    "blocks": [
      {
        "type": "section",
        "text": {
          "type": "mrkdwn",
          "text": "#{text}",
        }
      }
    ]
  }
end

def prepare_deploy_starting_slack_message(source, destination, deployed_by, deployment_reason, refs)
  # Slack guide on building rich messages: https://api.slack.com/messaging/composing/layouts
  {
    "blocks": [
      {
        "type": "header",
        "text": {
          "type": "plain_text",
          "text": "Deployment :rocket:",
          "emoji": true
        }
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "plain_text",
            "text": "Starting deployment"
          }
        ]
      },
      {
        "type": "section",
        "fields": [
        {
            "type": "mrkdwn",
            "text": "*Source*:\n#{source}"
          },
          {
            "type": "mrkdwn",
            "text": "*Destination*:\n#{destination}"
          }
        ]
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "*Deployed by:*\n#{deployed_by}"
          },
          {
            "type": "mrkdwn",
            "text": "*Reason:*\n#{deployment_reason}"
          }
        ]
      },
      {
        "type": "section",
        "fields": [
          {
            "type": "mrkdwn",
            "text": "*Refs:*\n#{refs}"
          }
        ]
      },
      {
        "type": "context",
        "elements": [
          {
            "type": "plain_text",
            "text": "Automated by Github Actions",
            "emoji": true
          }
        ]
      }
    ]
  }
end

def post_slack_message(message, slack_hook)
  puts "Post slack message: #{message}"
  puts `curl -sS -X POST --data-urlencode payload=#{Shellwords.escape(JSON.dump(message))} #{slack_hook}`
end

def tags_and_branches(image)
  m = image.match(/^sha-([0-9a-f]{7,})$/)
  return unless m
  `git ls-remote --tags --heads origin | grep ^#{m.captures[0]} | cut -f 2` \
      .gsub(/\^\{\}$/m, '') \
      .gsub(/^refs\/heads\//m, 'origin/') \
      .gsub(/^refs\/tags\//m, '') \
      .split("\n")
end

notify_slack(env, image, "start", deployed_by, deployment_reason)
begin
  ENV['AWS_PAGER'] ||= ''  # awscli v2 auto-paginates

  os = RbConfig::CONFIG['host_os'] =~ /darwin/ ? 'darwin' : 'linux'
  system!("curl -sS -L https://github.com/chanzuckerberg/czecs/releases/download/v0.1.2/czecs_0.1.2_#{os}_amd64.tar.gz | tar xz -C /tmp czecs")
  aws_account_id = `aws sts get-caller-identity --query="Account" | tr -d '\"'`.strip
  task_definition_arn = `/tmp/czecs register -f balances.json --set tag=#{image} --set env=#{env} --set account_id=#{aws_account_id} czecs.json`.strip
  $?.exitstatus == 0 || abort("\n== Could not register task ==\n")

  puts 'running migrations'
  puts "/tmp/czecs task -f balances.json --timeout 0 --set taskDefinitionArn=#{task_definition_arn} --set cluster=#{cluster} czecs-task-migrate.json"
  puts "/tmp/czecs upgrade --timeout 900 --task-definition-arn #{task_definition_arn} #{cluster} czid-#{env}-web"
  system!("/tmp/czecs task -f balances.json --timeout 0 --set taskDefinitionArn=#{task_definition_arn} --set cluster=#{cluster} czecs-task-migrate.json")
  system!("/tmp/czecs upgrade --timeout 900 --task-definition-arn #{task_definition_arn} #{cluster} czid-#{env}-web")

  puts "image: #{image}, env: #{env}, aws_account_id: #{aws_account_id}, cluster: #{cluster}"
  # Resque workers
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque --set rake_command=resque:workers --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque czecs-resque.json")
  # Resque scheduler
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque-scheduler --set rake_command=resque:scheduler --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque-scheduler czecs-resque.json")

  # Pipeline monitor
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque-pipeline-monitor --set rake_command=pipeline_monitor --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque-pipeline-monitor czecs-resque.json")
  # Result monitor
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=resque-result-monitor --set rake_command=result_monitor --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-resque-result-monitor czecs-resque.json")

  # Shoryuken
  system!("/tmp/czecs upgrade -f balances.json --set tag=#{image} --set env=#{env} --set name=shoryuken --set entry_command='-R -C config/shoryuken.yml' --set account_id=#{aws_account_id} #{cluster} idseq-#{env}-shoryuken czecs-shoryuken.json")

  puts "load release tag into param store"
  `aws ssm put-parameter --name /idseq-#{env}-web/GIT_RELEASE_SHA --value #{image.match(/^sha-([0-9a-f]{7,})$/)[1]} --type String --overwrite`
  notify_slack(env, image, "end")
rescue Exception  # Even on abort/SystemExit
  notify_slack(env, image, "failure")
  raise
ensure
  system!("rm -f /tmp/czecs")
end
