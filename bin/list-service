#!/usr/bin/env bash
#
# Assume a cluster has a single service.
# List out that service or fail if there is not just one.

set -u
set -o errexit
set -o pipefail

function command_help() {
  echo "\
NOTE: assumes just 1 service in cluster

    $(basename "$0") CLUSTER
  "
}

function error_msg() {
  {
  echo ""
  echo "ERROR: $*"
  echo ""
  } >&2
}

function exit_msg() {
  error_msg "$@"
  command_help >&2
  exit 1
}

# Buffer the output (before piping).
# This makes sure the error message from the 1st command
# gets printed before the 2nd command can fail.
# Also useful when stdout has error information but is normally suppressed.
function buffer() {
  if response=$("$@"); then
    echo "$response"
  else
    exit_msg "$*": "$response"
  fi
}

if [[ -z ${1+undefined-guard} ]]; then
  exit_msg "expected a repo as a first argument"
fi
cluster="$1"

AWS=${AWS_COMMAND:-aws}
AWS_COMMAND="$AWS"
export AWS_COMMAND

services=$(buffer $AWS ecs list-services --cluster "$cluster" \
    | jq -r '.serviceArns | .[]'
    )
serviceCount=$(echo "$services" | wc -l | awk '{print $1}')
if [[ $serviceCount == 1 ]]; then
    echo "$services" | sed 's/.*\///'
else
    error_msg "$services"
    exit_msg "expected 1 service, found $serviceCount"
fi
