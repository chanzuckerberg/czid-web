<%= form_with(model: pipeline_output, local: true) do |form| %>
  <% if pipeline_output.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(pipeline_output.errors.count, "error") %> prohibited this pipeline_output from being saved:</h2>

      <ul>
      <% pipeline_output.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

  A new entry run will be created by kicking off the processing pipeline. 
  <br>
  For now, you can create an artificial "pipeline run" using this form.
  <br>
  Or post a JSON from the pipeline as follows, making sure the file contains the appropriate sample ID: 
  <br>
  curl -H "Accept: application/json" -H "Content-type: application/json" -X POST -d @some_output_file.json http://localhost:3000/pipeline_outputs.json 
  <br>
  <br>

  <div class="field radiobutton-list">
    <%= form.label :sample_id %>
    <%= form.collection_radio_buttons :sample_id, Sample.all, :id, :name %>
  </div>

  <div class="field">
    <%= form.label :total_reads %>
    <%= form.number_field :total_reads, id: :pipeline_output_total_reads %>
  </div>

  <div class="field">
    <%= form.label :remaining_reads %>
    <%= form.number_field :remaining_reads, id: :pipeline_output_remaining_reads %>
  </div>

  <div class="actions">
    <%= form.submit %>
  </div>
<% end %>
