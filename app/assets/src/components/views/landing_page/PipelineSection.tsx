import React, { useRef, useState } from "react";
import PipelineAntimicrobialImg from "~/images/landing_page/pipeline-antimicrobial-img.png";
import PipelineMetagenomicImg from "~/images/landing_page/pipeline-metagenomic-img.png";
import PipelineViralImg from "~/images/landing_page/pipeline-viral-img.png";
import cs from "./PipelineSection.scss";

const PipelineSection = () => {
  const TABLE_ROW_TITLES = {
    sequencingPlatform: "Sequencing Platform:",
    dataTypesSupported: "Data Types Supported:",
    illuminaAverageRuntime: "Illumina Average Runtime:",
  };

  const DnaIcon = () => (
    <svg viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="32.0593" cy="31.8767" r="31.5" fill="#3867FA" />
      <path
        d="M18.2004 36.4249L15.4625 40.6049C15.1514 41.0799 15.2825 41.7088 15.7575 42.02C16.2325 42.3311 16.8614 42.2 17.1725 41.725L19.9104 37.545C22.3994 33.745 26.7929 31.7355 31.4475 32.1597C32.2786 33.6543 32.7854 35.2986 32.9876 36.9244L28.5543 34.0205C28.0793 33.7094 27.4504 33.8405 27.1393 34.3155C26.8282 34.7905 26.9593 35.4194 27.4343 35.7305L33.0076 39.3811C32.9203 40.2743 32.749 41.1576 32.4619 42.0104L23.9753 36.4516C23.5003 36.1405 22.8714 36.2715 22.5603 36.7465C22.2492 37.2215 22.3803 37.8504 22.8552 38.1616L31.6902 43.9485C31.5145 44.2859 31.3387 44.6233 31.1313 44.94L30.3846 46.08L21.2646 40.1064C20.7896 39.7952 20.1607 39.9263 19.8496 40.4013C19.5385 40.8763 19.6696 41.5052 20.1446 41.8164L29.2329 47.7693L28.3617 49.0993C28.0506 49.5743 28.1817 50.2032 28.6567 50.5143C29.1317 50.8254 29.7606 50.6943 30.0717 50.2193L32.8304 46.0077C35.5061 41.9227 35.8112 36.828 33.8115 32.3505C38.7467 32.4154 43.2842 30.0477 45.9392 25.9944L48.6771 21.8144C48.9882 21.3394 48.8571 20.7105 48.3821 20.3994C47.9071 20.0883 47.2782 20.2194 46.9671 20.6944L44.2292 24.8743C41.7402 28.6743 37.3467 30.6839 32.6921 30.2597C31.861 28.765 31.3542 27.1207 31.152 25.495L35.5853 28.3988C36.0603 28.7099 36.6892 28.5788 37.0003 28.1038C37.3114 27.6288 37.1803 26.9999 36.7053 26.6888L31.132 23.0383C31.2193 22.1451 31.3906 21.2618 31.6777 20.409L40.196 25.9885C40.671 26.2996 41.2999 26.1685 41.611 25.6935C41.9221 25.2185 41.791 24.5896 41.316 24.2785L32.4494 18.4708C32.6251 18.1334 32.8009 17.796 33.0083 17.4793L33.755 16.3393L42.875 22.313C43.35 22.6241 43.9789 22.493 44.29 22.018C44.6011 21.543 44.4493 20.9458 43.9743 20.6347L34.886 14.6818L35.7571 13.3518C36.0683 12.8768 35.9372 12.2479 35.4622 11.9367C34.9872 11.6256 34.3583 11.7567 34.0471 12.2317L31.3092 16.4117C28.6335 20.4967 28.3284 25.5914 30.3281 30.0689C25.4246 30.0247 20.8554 32.3716 18.2004 36.4249Z"
        fill="#F8F9FE"
      />
    </svg>
  );

  const MicrobeIcon = () => (
    <svg viewBox="0 0 45 45" fill="none" xmlns="http://www.w3.org/2000/svg">
      <circle cx="22.5425" cy="22.1252" r="22" fill="#3CB371" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M26.0362 9.56432C25.7401 9.45656 25.4784 9.56355 25.3553 9.83671L25.335 9.88663L24.8551 11.205L24.6118 11.1476C24.1499 11.0476 23.6773 11.0177 23.125 11.0441L22.9569 11.0536L22.8955 11.0577L22.1295 9.32625L22.1039 9.27728C21.9604 9.02955 21.6714 8.93855 21.4067 9.06048C21.1421 9.18236 21.0289 9.45776 21.1275 9.72502L21.1485 9.77499L21.8184 11.3061L21.6006 11.3644C21.2755 11.4609 20.9461 11.6317 20.5284 11.9083L20.3548 12.0253L19.4764 10.9304L19.4348 10.8958C19.1914 10.7062 18.8853 10.6857 18.664 10.8636C18.4369 11.0461 18.4069 11.3592 18.578 11.608L18.6124 11.6539L19.5284 12.7012L19.3606 12.8662C19.0689 13.1658 18.815 13.5333 18.583 13.9747L18.5065 14.1246L18.4715 14.1951L17.1437 13.7118L17.093 13.6952C16.799 13.6101 16.5465 13.7398 16.4397 14.0332C16.3333 14.3257 16.4426 14.5861 16.7191 14.7103L16.7697 14.7308L18.0492 15.1965L17.2856 17.2944L15.6808 17.2665L15.6328 17.2694C15.3367 17.2972 15.1318 17.5061 15.1241 17.8206C15.1199 17.9916 15.2807 18.2165 15.4752 18.2873C15.5334 18.3085 15.559 18.3137 15.5898 18.3039L15.6093 18.2961L15.6519 18.2883L16.8942 18.3698L16.0472 20.6969L14.7705 20.2322L14.7197 20.2155C14.4258 20.1305 14.1733 20.2602 14.0665 20.5535C13.96 20.8461 14.0694 21.1065 14.3459 21.2306L14.3965 21.2511L15.676 21.7168L15.0424 23.4575L14.0225 22.6237C13.8043 22.463 13.4615 22.5063 13.2725 22.7163C13.0941 22.9145 13.1151 23.2498 13.303 23.4529L13.3401 23.4894L14.648 24.5213L14.5938 24.7436C14.4641 25.299 14.404 25.8059 14.4222 26.2794L14.4301 26.4205L14.436 26.5015L13.0696 26.7134L13.0144 26.7263C12.7482 26.8018 12.5855 27.0629 12.5935 27.3492C12.6454 27.5582 12.771 27.708 12.9688 27.78L13.0543 27.8098C13.075 27.8163 13.0902 27.82 13.1072 27.8232C13.1373 27.8289 13.1685 27.8307 13.2061 27.8287L13.2459 27.8253L14.6132 27.613L14.6834 27.8328C14.8409 28.3084 15.0314 28.7142 15.2989 29.1411L15.391 29.2843L15.4294 29.3425L14.0631 30.7874L14.0312 30.8258C13.8689 31.0379 13.8718 31.3284 14.0373 31.5099L14.0725 31.5447L14.0937 31.573C14.1018 31.5902 14.1237 31.6099 14.158 31.6292C14.1869 31.6455 14.2139 31.6567 14.2619 31.6742C14.4728 31.7509 14.6836 31.7171 14.8082 31.5725L14.8354 31.5371L16.1113 30.1749L16.3131 30.3424C16.6427 30.6088 16.9831 30.8342 17.3603 31.0331L17.5243 31.1168L17.5951 31.1518L17.5681 31.226C16.7434 33.4918 17.9057 35.9541 20.1937 36.7868C22.4476 37.6072 24.881 36.5141 25.7414 34.3154L25.7795 34.2147C26.3894 32.539 28.1777 31.6908 29.8722 32.2555L29.9629 32.2871C31.8919 32.9892 34.0393 32.0001 34.7407 30.0766C34.8979 29.7994 34.7827 29.5299 34.4644 29.4141C34.151 29.3 33.876 29.4267 33.7633 29.7364C33.2818 31.0594 31.8161 31.7565 30.4758 31.3173L30.3939 31.289C28.1401 30.4686 25.7067 31.5617 24.8462 33.7605L24.8082 33.8612C24.1874 35.5668 22.3457 36.4151 20.6247 35.7887C18.934 35.1733 18.0689 33.3927 18.6277 31.7129L18.6591 31.6231L18.7074 31.4904L18.9358 31.5437C19.4417 31.6561 19.9031 31.7011 20.3325 31.6695L20.4604 31.6576L20.5436 31.6484L20.765 33.006L20.7795 33.0577C20.8383 33.2415 20.9589 33.3733 21.141 33.4396L21.2265 33.4694C21.2471 33.4758 21.2623 33.4796 21.2794 33.4828C21.3195 33.4903 21.3616 33.4911 21.4152 33.4854C21.6933 33.4327 21.8727 33.1906 21.8856 32.9018L21.886 32.8434L21.6634 31.4816L21.8696 31.4218C22.3029 31.2891 22.7553 31.081 23.1361 30.8405L23.2602 30.7591L23.3247 30.7153L24.2329 31.754L24.2706 31.7912C24.2966 31.8151 24.3198 31.8322 24.345 31.8463L24.3758 31.8621C24.3982 31.8723 24.427 31.8833 24.4788 31.9021C24.6392 31.9606 24.8898 31.925 25.0398 31.8159C25.2669 31.6333 25.2969 31.3203 25.1258 31.0715L25.0914 31.0256L24.1777 29.9809L24.3466 29.7998C24.6589 29.4512 24.9329 29.0311 25.1862 28.5306L25.2865 28.3265L26.9442 28.3768L26.9922 28.3739C27.2883 28.346 27.4933 28.1372 27.501 27.8279C27.4907 27.5307 27.2975 27.3113 27.0008 27.2781L26.944 27.2741L25.6448 27.3238L26.2807 25.5766L27.5575 26.0414L27.6082 26.058C27.9021 26.1431 28.1546 26.0134 28.2614 25.72C28.3679 25.4275 28.2585 25.167 27.982 25.0429L27.9314 25.0224L26.6519 24.5567L27.6313 21.866L29.236 21.8939L29.284 21.8911C29.5801 21.8632 29.7851 21.6544 29.7928 21.345C29.7825 21.0479 29.5893 20.8285 29.2903 20.7953L29.2331 20.7913L28.0195 20.7993L28.6539 19.0563L29.9307 19.521L29.9814 19.5376C30.2753 19.6227 30.5278 19.493 30.6346 19.1997C30.7411 18.9071 30.6317 18.6467 30.3552 18.5225L30.3047 18.5021L28.9749 18.0181L29.0273 17.7911C29.1363 17.2947 29.1791 16.8412 29.1465 16.4185L29.1329 16.2787L29.1228 16.1943L30.4929 15.9818L30.5481 15.9689C30.8144 15.8934 30.977 15.6323 30.9681 15.3419C30.9133 15.0654 30.6676 14.8852 30.3756 14.8706L30.3167 14.8699L28.948 15.0824L28.8868 14.8783C28.7506 14.4473 28.5383 13.9969 28.2936 13.6174L28.211 13.4937L28.1658 13.4285L29.2504 12.4946C29.4582 12.2968 29.4632 11.976 29.2646 11.7331C29.0787 11.5058 28.7621 11.474 28.5123 11.6424L28.4663 11.6763L27.4175 12.5789L27.2516 12.4125C26.9479 12.121 26.576 11.8666 26.1299 11.6335L25.9784 11.5566L25.9076 11.5216L26.3651 10.2647L26.3815 10.2146C26.4652 9.92394 26.333 9.67236 26.0362 9.56432ZM25.0775 12.3843C27.4222 13.2377 28.6312 15.7394 27.8445 18.0684L27.8084 18.171L24.3561 27.6562L24.3175 27.7584C23.4212 30.0511 20.8851 31.1845 18.5449 30.3327C16.2002 29.4793 14.9911 26.9776 15.7779 24.6486L15.8139 24.546L19.2663 15.0608L19.3048 14.9586C20.2012 12.6659 22.7372 11.5325 25.0775 12.3843ZM20.6525 22.4091C19.3794 21.9458 17.9579 22.6091 17.4942 23.8831C17.0305 25.157 17.693 26.5789 18.9661 27.0423C20.2392 27.5057 21.6607 26.8423 22.1244 25.5684C22.5881 24.2944 21.9256 22.8725 20.6525 22.4091ZM20.2761 23.4432C20.9813 23.6999 21.3479 24.4867 21.0911 25.1922C20.8343 25.8978 20.0477 26.2649 19.3425 26.0082C18.6374 25.7516 18.2708 24.9648 18.5276 24.2592C18.7844 23.5537 19.5709 23.1866 20.2761 23.4432ZM23.5547 22.1537C23.2807 22.054 22.9778 22.1954 22.878 22.4695C22.7782 22.7436 22.9194 23.0467 23.1933 23.1464C23.4673 23.2461 23.7702 23.1047 23.87 22.8306C23.9698 22.5564 23.8286 22.2534 23.5547 22.1537ZM24.4552 18.3942C24.2511 18.2129 23.9192 18.2385 23.7612 18.4402L23.7351 18.4776L22.4888 20.039L22.4593 20.0749C22.2995 20.2897 22.345 20.6295 22.5294 20.8016C22.5634 20.814 22.5852 20.8292 22.6164 20.8598L22.6674 20.9115C22.6771 20.9206 22.6829 20.9246 22.6873 20.9262C22.8774 20.9954 23.1154 20.9304 23.2489 20.773L23.2778 20.7351L24.5241 19.1737L24.5537 19.1378C24.7135 18.923 24.6679 18.5832 24.4552 18.3942ZM20.8199 18.3473C20.546 18.2476 20.243 18.389 20.1432 18.6632C20.0434 18.9373 20.1846 19.2404 20.4586 19.3401C20.7325 19.4398 21.0354 19.2984 21.1352 19.0242C21.235 18.7501 21.0938 18.447 20.8199 18.3473ZM22.4296 15.2632C22.3969 14.9939 22.1371 14.8116 21.8318 14.8683C21.5567 14.8761 21.3586 15.1132 21.389 15.4003L21.5941 16.8548C21.6339 17.0699 21.7461 17.2071 21.9371 17.2766L22.0084 17.3016C22.0668 17.3206 22.0908 17.3224 22.1174 17.3129L22.131 17.3072L22.1654 17.2992C22.4405 17.2914 22.6386 17.0543 22.608 16.7656L22.6002 16.7142L22.433 15.3073L22.4296 15.2632ZM24.9869 14.6169C24.7129 14.5172 24.41 14.6586 24.3102 14.9327C24.2104 15.2069 24.3516 15.5099 24.6255 15.6096C24.8995 15.7093 25.2024 15.5679 25.3022 15.2938C25.402 15.0196 25.2608 14.7166 24.9869 14.6169Z"
        fill="white"
      />
      <circle cx="22.5425" cy="22.1252" r="22" fill="#3CB371" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M26.0362 9.56432C25.7401 9.45656 25.4784 9.56355 25.3553 9.83671L25.335 9.88663L24.8551 11.205L24.6118 11.1476C24.1499 11.0476 23.6773 11.0177 23.125 11.0441L22.9569 11.0536L22.8955 11.0577L22.1295 9.32625L22.1039 9.27728C21.9604 9.02955 21.6714 8.93855 21.4067 9.06048C21.1421 9.18236 21.0289 9.45776 21.1275 9.72502L21.1485 9.77499L21.8184 11.3061L21.6006 11.3644C21.2755 11.4609 20.9461 11.6317 20.5284 11.9083L20.3548 12.0253L19.4764 10.9304L19.4348 10.8958C19.1914 10.7062 18.8853 10.6857 18.664 10.8636C18.4369 11.0461 18.4069 11.3592 18.578 11.608L18.6124 11.6539L19.5284 12.7012L19.3606 12.8662C19.0689 13.1658 18.815 13.5333 18.583 13.9747L18.5065 14.1246L18.4715 14.1951L17.1437 13.7118L17.093 13.6952C16.799 13.6101 16.5465 13.7398 16.4397 14.0332C16.3333 14.3257 16.4426 14.5861 16.7191 14.7103L16.7697 14.7308L18.0492 15.1965L17.2856 17.2944L15.6808 17.2665L15.6328 17.2694C15.3367 17.2972 15.1318 17.5061 15.1241 17.8206C15.1199 17.9916 15.2807 18.2165 15.4752 18.2873C15.5334 18.3085 15.559 18.3137 15.5898 18.3039L15.6093 18.2961L15.6519 18.2883L16.8942 18.3698L16.0472 20.6969L14.7705 20.2322L14.7197 20.2155C14.4258 20.1305 14.1733 20.2602 14.0665 20.5535C13.96 20.8461 14.0694 21.1065 14.3459 21.2306L14.3965 21.2511L15.676 21.7168L15.0424 23.4575L14.0225 22.6237C13.8043 22.463 13.4615 22.5063 13.2725 22.7163C13.0941 22.9145 13.1151 23.2498 13.303 23.4529L13.3401 23.4894L14.648 24.5213L14.5938 24.7436C14.4641 25.299 14.404 25.8059 14.4222 26.2794L14.4301 26.4205L14.436 26.5015L13.0696 26.7134L13.0144 26.7263C12.7482 26.8018 12.5855 27.0629 12.5935 27.3492C12.6454 27.5582 12.771 27.708 12.9688 27.78L13.0543 27.8098C13.075 27.8163 13.0902 27.82 13.1072 27.8232C13.1373 27.8289 13.1685 27.8307 13.2061 27.8287L13.2459 27.8253L14.6132 27.613L14.6834 27.8328C14.8409 28.3084 15.0314 28.7142 15.2989 29.1411L15.391 29.2843L15.4294 29.3425L14.0631 30.7874L14.0312 30.8258C13.8689 31.0379 13.8718 31.3284 14.0373 31.5099L14.0725 31.5447L14.0937 31.573C14.1018 31.5902 14.1237 31.6099 14.158 31.6292C14.1869 31.6455 14.2139 31.6567 14.2619 31.6742C14.4728 31.7509 14.6836 31.7171 14.8082 31.5725L14.8354 31.5371L16.1113 30.1749L16.3131 30.3424C16.6427 30.6088 16.9831 30.8342 17.3603 31.0331L17.5243 31.1168L17.5951 31.1518L17.5681 31.226C16.7434 33.4918 17.9057 35.9541 20.1937 36.7868C22.4476 37.6072 24.881 36.5141 25.7414 34.3154L25.7795 34.2147C26.3894 32.539 28.1777 31.6908 29.8722 32.2555L29.9629 32.2871C31.8919 32.9892 34.0393 32.0001 34.7407 30.0766C34.8979 29.7994 34.7827 29.5299 34.4644 29.4141C34.151 29.3 33.876 29.4267 33.7633 29.7364C33.2818 31.0594 31.8161 31.7565 30.4758 31.3173L30.3939 31.289C28.1401 30.4686 25.7067 31.5617 24.8462 33.7605L24.8082 33.8612C24.1874 35.5668 22.3457 36.4151 20.6247 35.7887C18.934 35.1733 18.0689 33.3927 18.6277 31.7129L18.6591 31.6231L18.7074 31.4904L18.9358 31.5437C19.4417 31.6561 19.9031 31.7011 20.3325 31.6695L20.4604 31.6576L20.5436 31.6484L20.765 33.006L20.7795 33.0577C20.8383 33.2415 20.9589 33.3733 21.141 33.4396L21.2265 33.4694C21.2471 33.4758 21.2623 33.4796 21.2794 33.4828C21.3195 33.4903 21.3616 33.4911 21.4152 33.4854C21.6933 33.4327 21.8727 33.1906 21.8856 32.9018L21.886 32.8434L21.6634 31.4816L21.8696 31.4218C22.3029 31.2891 22.7553 31.081 23.1361 30.8405L23.2602 30.7591L23.3247 30.7153L24.2329 31.754L24.2706 31.7912C24.2966 31.8151 24.3198 31.8322 24.345 31.8463L24.3758 31.8621C24.3982 31.8723 24.427 31.8833 24.4788 31.9021C24.6392 31.9606 24.8898 31.925 25.0398 31.8159C25.2669 31.6333 25.2969 31.3203 25.1258 31.0715L25.0914 31.0256L24.1777 29.9809L24.3466 29.7998C24.6589 29.4512 24.9329 29.0311 25.1862 28.5306L25.2865 28.3265L26.9442 28.3768L26.9922 28.3739C27.2883 28.346 27.4933 28.1372 27.501 27.8279C27.4907 27.5307 27.2975 27.3113 27.0008 27.2781L26.944 27.2741L25.6448 27.3238L26.2807 25.5766L27.5575 26.0414L27.6082 26.058C27.9021 26.1431 28.1546 26.0134 28.2614 25.72C28.3679 25.4275 28.2585 25.167 27.982 25.0429L27.9314 25.0224L26.6519 24.5567L27.6313 21.866L29.236 21.8939L29.284 21.8911C29.5801 21.8632 29.7851 21.6544 29.7928 21.345C29.7825 21.0479 29.5893 20.8285 29.2903 20.7953L29.2331 20.7913L28.0195 20.7993L28.6539 19.0563L29.9307 19.521L29.9814 19.5376C30.2753 19.6227 30.5278 19.493 30.6346 19.1997C30.7411 18.9071 30.6317 18.6467 30.3552 18.5225L30.3047 18.5021L28.9749 18.0181L29.0273 17.7911C29.1363 17.2947 29.1791 16.8412 29.1465 16.4185L29.1329 16.2787L29.1228 16.1943L30.4929 15.9818L30.5481 15.9689C30.8144 15.8934 30.977 15.6323 30.9681 15.3419C30.9133 15.0654 30.6676 14.8852 30.3756 14.8706L30.3167 14.8699L28.948 15.0824L28.8868 14.8783C28.7506 14.4473 28.5383 13.9969 28.2936 13.6174L28.211 13.4937L28.1658 13.4285L29.2504 12.4946C29.4582 12.2968 29.4632 11.976 29.2646 11.7331C29.0787 11.5058 28.7621 11.474 28.5123 11.6424L28.4663 11.6763L27.4175 12.5789L27.2516 12.4125C26.9479 12.121 26.576 11.8666 26.1299 11.6335L25.9784 11.5566L25.9076 11.5216L26.3651 10.2647L26.3815 10.2146C26.4652 9.92394 26.333 9.67236 26.0362 9.56432ZM25.0775 12.3843C27.4222 13.2377 28.6312 15.7394 27.8445 18.0684L27.8084 18.171L24.3561 27.6562L24.3175 27.7584C23.4212 30.0511 20.8851 31.1845 18.5449 30.3327C16.2002 29.4793 14.9911 26.9776 15.7779 24.6486L15.8139 24.546L19.2663 15.0608L19.3048 14.9586C20.2012 12.6659 22.7372 11.5325 25.0775 12.3843ZM20.6525 22.4091C19.3794 21.9458 17.9579 22.6091 17.4942 23.8831C17.0305 25.157 17.693 26.5789 18.9661 27.0423C20.2392 27.5057 21.6607 26.8423 22.1244 25.5684C22.5881 24.2944 21.9256 22.8725 20.6525 22.4091ZM20.2761 23.4432C20.9813 23.6999 21.3479 24.4867 21.0911 25.1922C20.8343 25.8978 20.0477 26.2649 19.3425 26.0082C18.6374 25.7516 18.2708 24.9648 18.5276 24.2592C18.7844 23.5537 19.5709 23.1866 20.2761 23.4432ZM23.5547 22.1537C23.2807 22.054 22.9778 22.1954 22.878 22.4695C22.7782 22.7436 22.9194 23.0467 23.1933 23.1464C23.4673 23.2461 23.7702 23.1047 23.87 22.8306C23.9698 22.5564 23.8286 22.2534 23.5547 22.1537ZM24.4552 18.3942C24.2511 18.2129 23.9192 18.2385 23.7612 18.4402L23.7351 18.4776L22.4888 20.039L22.4593 20.0749C22.2995 20.2897 22.345 20.6295 22.5294 20.8016C22.5634 20.814 22.5852 20.8292 22.6164 20.8598L22.6674 20.9115C22.6771 20.9206 22.6829 20.9246 22.6873 20.9262C22.8774 20.9954 23.1154 20.9304 23.2489 20.773L23.2778 20.7351L24.5241 19.1737L24.5537 19.1378C24.7135 18.923 24.6679 18.5832 24.4552 18.3942ZM20.8199 18.3473C20.546 18.2476 20.243 18.389 20.1432 18.6632C20.0434 18.9373 20.1846 19.2404 20.4586 19.3401C20.7325 19.4398 21.0354 19.2984 21.1352 19.0242C21.235 18.7501 21.0938 18.447 20.8199 18.3473ZM22.4296 15.2632C22.3969 14.9939 22.1371 14.8116 21.8318 14.8683C21.5567 14.8761 21.3586 15.1132 21.389 15.4003L21.5941 16.8548C21.6339 17.0699 21.7461 17.2071 21.9371 17.2766L22.0084 17.3016C22.0668 17.3206 22.0908 17.3224 22.1174 17.3129L22.131 17.3072L22.1654 17.2992C22.4405 17.2914 22.6386 17.0543 22.608 16.7656L22.6002 16.7142L22.433 15.3073L22.4296 15.2632ZM24.9869 14.6169C24.7129 14.5172 24.41 14.6586 24.3102 14.9327C24.2104 15.2069 24.3516 15.5099 24.6255 15.6096C24.8995 15.7093 25.2024 15.5679 25.3022 15.2938C25.402 15.0196 25.2608 14.7166 24.9869 14.6169Z"
        fill="white"
      />
    </svg>
  );

  const VirusIcon = () => (
    <svg
      width="45"
      height="45"
      viewBox="0 0 45 45"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="22.5425" cy="22.1917" r="22" fill="#7A41CE" />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M32.1717 20.3267C32.1717 19.9164 32.5044 19.5838 32.9147 19.5838C33.325 19.5838 33.6577 19.9164 33.6577 20.3267V23.2987C33.6577 23.7091 33.325 24.0417 32.9147 24.0417C32.5044 24.0417 32.1717 23.7091 32.1717 23.2987V22.5557H30.6857C30.5192 24.199 29.8586 25.7533 28.7911 27.0137L29.8536 28.1207L30.3811 27.5932C30.6759 27.3408 31.1153 27.3577 31.3897 27.6322C31.6642 27.9066 31.6812 28.346 31.4287 28.6408L30.3662 29.733L29.3186 30.7806C29.0288 31.0687 28.5608 31.0687 28.271 30.7806C27.9829 30.4909 27.9829 30.0228 28.271 29.733L28.7985 29.2055L27.7137 28.1282C26.4488 29.1823 24.895 29.8297 23.2558 29.9856V31.4716H23.9988C24.4091 31.4716 24.7418 31.8043 24.7418 32.2146C24.7418 32.625 24.4091 32.9576 23.9988 32.9576H21.0268C20.6165 32.9576 20.2838 32.625 20.2838 32.2146C20.2838 31.8043 20.6165 31.4716 21.0268 31.4716H21.7698V29.9856C20.1265 29.8191 18.5723 29.1585 17.3119 28.091L16.2048 29.1535L16.7323 29.681C17.0204 29.9708 17.0204 30.4388 16.7323 30.7286C16.4425 31.0167 15.9745 31.0167 15.6847 30.7286L14.6297 29.6884L13.5969 28.6408C13.3631 28.468 13.2516 28.1748 13.3115 27.8903C13.3713 27.6059 13.5916 27.3825 13.8752 27.3185C14.1587 27.2546 14.4535 27.3619 14.6297 27.5932L15.1572 28.1207L16.2345 27.0137C15.1804 25.7487 14.533 24.1949 14.377 22.5557H12.8539V23.2987C12.8539 23.7091 12.5213 24.0417 12.1109 24.0417C11.7006 24.0417 11.3679 23.7091 11.3679 23.2987V20.3267C11.3679 19.9164 11.7006 19.5838 12.1109 19.5838C12.5213 19.5838 12.8539 19.9164 12.8539 20.3267V21.0697H14.377C14.533 19.4306 15.1804 17.8767 16.2345 16.6118L15.172 15.5047L14.6445 16.0323C14.3547 16.3203 13.8867 16.3203 13.5969 16.0323C13.3088 15.7425 13.3088 15.2744 13.5969 14.9846L14.6371 13.9296L15.6847 12.8968C15.8575 12.6631 16.1507 12.5515 16.4352 12.6114C16.7197 12.6713 16.9431 12.8915 17.007 13.1751C17.0709 13.4587 16.9636 13.7535 16.7323 13.9296L16.2048 14.4571L17.3119 15.5344C18.5768 14.4804 20.1306 13.8329 21.7698 13.677V12.1538H21.0268C20.6165 12.1538 20.2838 11.8212 20.2838 11.4108C20.2838 11.0005 20.6165 10.6678 21.0268 10.6678H23.9988C24.4091 10.6678 24.7418 11.0005 24.7418 11.4108C24.7418 11.8212 24.4091 12.1538 23.9988 12.1538H23.2558V13.677C24.895 13.8329 26.4488 14.4804 27.7137 15.5344L28.8208 14.472L28.2933 13.9444C28.0813 13.7629 27.9889 13.4778 28.0542 13.2063C28.1195 12.9349 28.3314 12.723 28.6028 12.6577C28.8742 12.5924 29.1593 12.6848 29.3409 12.8968L30.396 13.937L31.4436 14.9846C31.7316 15.2744 31.7316 15.7425 31.4436 16.0323C31.1538 16.3203 30.6857 16.3203 30.396 16.0323L29.8684 15.5047L28.8282 16.6118C29.8823 17.8767 30.5298 19.4306 30.6857 21.0697H32.1717V20.3267ZM15.8259 21.8127C15.8259 25.5058 18.8197 28.4997 22.5128 28.4997C24.2863 28.4997 25.9871 27.7951 27.2412 26.5411C28.4952 25.2871 29.1997 23.5862 29.1997 21.8127C29.1997 18.1196 26.2059 15.1258 22.5128 15.1258C18.8197 15.1258 15.8259 18.1196 15.8259 21.8127Z"
        fill="white"
      />
      <path
        d="M18.939 20.511C19.6579 20.511 20.2407 21.0938 20.2407 21.8127C20.2407 22.5317 19.6579 23.1145 18.939 23.1145C18.2201 23.1145 17.6373 22.5317 17.6373 21.8127C17.6373 21.0938 18.2201 20.511 18.939 20.511Z"
        fill="white"
      />
      <path
        d="M22.7922 23.3158C23.795 23.3158 24.608 24.1288 24.608 25.1316C24.608 26.1345 23.795 26.9475 22.7922 26.9475C21.7893 26.9475 20.9763 26.1345 20.9763 25.1316C20.9763 24.1288 21.7893 23.3158 22.7922 23.3158Z"
        fill="white"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M22.3231 20.6971C22.7756 21.4482 23.6063 21.8875 24.4818 21.8388C25.7356 21.7689 26.7166 20.7318 26.7166 19.4761C26.7166 18.2203 25.7356 17.1832 24.4818 17.1134C23.6063 17.0646 22.7756 17.5039 22.3231 18.2551C21.8707 19.0062 21.8707 19.9459 22.3231 20.6971ZM23.4248 19.0318C23.6072 18.6131 24.0253 18.3469 24.4818 18.3588C25.0899 18.3669 25.5775 18.8643 25.5734 19.4724C25.5762 19.9291 25.3018 20.3418 24.8795 20.5157C24.4573 20.6897 23.9717 20.5901 23.652 20.264C23.3324 19.9379 23.2425 19.4505 23.4248 19.0318Z"
        fill="white"
      />
    </svg>
  );

  const PlusIcon = () => (
    <svg
      width="20"
      height="20"
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle
        cx="10.3881"
        cy="10.239"
        r="9.01565"
        stroke="#999999"
        strokeWidth="0.968695"
      />
      <path
        d="M10.3877 5.59192V14.8863"
        stroke="#999999"
        strokeWidth="0.968695"
      />
      <path
        d="M5.74091 10.2391L15.0353 10.2391"
        stroke="#999999"
        strokeWidth="0.968695"
      />
    </svg>
  );

  const MinusIcon = () => (
    <svg
      width="20"
      height="20"
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="10.1605" cy="9.60571" r="9.5" fill="#CCCCCC" />
      <path
        d="M5.51343 9.60535L14.8078 9.60535"
        stroke="white"
        strokeWidth="0.968695"
      />
    </svg>
  );

  const pipelineContentData = [
    {
      icon: "dna",
      theme: "blue",
      title: "Metagenomic Pipeline",
      copy: "Characterize microbes present in your samples, including viruses, bacteria, and eukaryotes",
      tableRows: [
        {
          title: TABLE_ROW_TITLES.sequencingPlatform,
          copy: "Illumina & Nanopore",
        },
        {
          title: TABLE_ROW_TITLES.dataTypesSupported,
          copy: "Shotgun (or random) data",
        },
        {
          title: TABLE_ROW_TITLES.illuminaAverageRuntime,
          copy: "3 hours",
        },
        {
          title: "Nanopore Average Runtime:",
          copy: "26 mins",
        },
      ],
    },
    {
      icon: "microbe",
      theme: "green",
      title: "Antimicrobial Resistance Pipeline",
      copy: "Detect antimicrobial resistant genes in your samples",
      tableRows: [
        {
          title: TABLE_ROW_TITLES.sequencingPlatform,
          copy: "Illumina",
        },
        {
          title: TABLE_ROW_TITLES.dataTypesSupported,
          copy: "Shotgun (or random) and whole genome sequence data",
        },
        {
          title: TABLE_ROW_TITLES.illuminaAverageRuntime,
          copy: "16 mins",
        },
      ],
    },
    {
      icon: "virus",
      theme: "purple",
      title: "Viral Consensus Genome Pipeline",
      copy: "Create consensus genomes for any virus",
      tableRows: [
        {
          title: TABLE_ROW_TITLES.sequencingPlatform,
          copy: "Illumina",
        },
        {
          title: TABLE_ROW_TITLES.dataTypesSupported,
          copy: "Target enrichment (e.g., MSSPE), PCR, whole genome, and metagenomic sequencing data",
        },
        {
          title: TABLE_ROW_TITLES.illuminaAverageRuntime,
          copy: "18 mins",
        },
      ],
    },
  ];

  const [accordion1Open, setAccordion1Open] = useState(true);
  const [accordion2Open, setAccordion2Open] = useState(false);
  const [accordion3Open, setAccordion3Open] = useState(false);

  const [imageSelected, setImageSelected] = useState(0);

  const desktopImg = useRef(null);

  return (
    <section className={cs.pipelineSection}>
      <h2>Fast Pipelines, No-Code Platform</h2>
      <div className={cs.pipelineSectionWrapper}>
        <div className={cs.pipelineRow__container}>
          {pipelineContentData.map((row, rowIndex) => (
            <div
              className={`${cs.pipelineRow} ${cs[row.theme]} ${
                (rowIndex === 0 && accordion1Open) ||
                (rowIndex === 1 && accordion2Open) ||
                (rowIndex === 2 && accordion3Open)
                  ? cs.open
                  : ""
              }`}
              key={`pipelineRow--${rowIndex}`}
              onClick={() => {
                if (rowIndex === 0) {
                  setAccordion1Open(true);

                  if (!accordion1Open) {
                    setAccordion2Open(false);
                    setAccordion3Open(false);
                  }

                  if (imageSelected !== 0) {
                    setImageSelected(0);
                  }
                }
                if (rowIndex === 1) {
                  setAccordion2Open(true);

                  if (!accordion2Open) {
                    setAccordion1Open(false);
                    setAccordion3Open(false);
                  }

                  if (imageSelected !== 1) {
                    setImageSelected(1);
                  }
                }
                if (rowIndex === 2) {
                  setAccordion3Open(true);

                  if (!accordion3Open) {
                    setAccordion1Open(false);
                    setAccordion2Open(false);
                  }

                  if (imageSelected !== 2) {
                    setImageSelected(2);
                  }
                }
              }}
              onKeyDown={e => {
                if (e.key === "Enter") {
                  if (rowIndex === 0) {
                    setAccordion1Open(true);

                    if (!accordion1Open) {
                      setAccordion2Open(false);
                      setAccordion3Open(false);
                    }

                    if (imageSelected !== 0) {
                      setImageSelected(0);
                    }
                  }
                  if (rowIndex === 1) {
                    setAccordion2Open(true);

                    if (!accordion2Open) {
                      setAccordion1Open(false);
                      setAccordion3Open(false);
                    }

                    if (imageSelected !== 1) {
                      setImageSelected(1);
                    }
                  }
                  if (rowIndex === 2) {
                    setAccordion3Open(true);

                    if (!accordion3Open) {
                      setAccordion1Open(false);
                      setAccordion2Open(false);
                    }

                    if (imageSelected !== 2) {
                      setImageSelected(2);
                    }
                  }
                }
              }}
              role="button"
              tabIndex={0}
            >
              <div className={cs.pipelineRow__icon}>
                {row.icon === "dna" && <DnaIcon />}
                {row.icon === "microbe" && <MicrobeIcon />}
                {row.icon === "virus" && <VirusIcon />}
                {rowIndex !== 2 && (
                  <div className={cs.pipelineRow__icon_line}></div>
                )}
              </div>
              <div className={cs.pipelineRow__content}>
                <div className={cs.pipelineRow__titleContainer}>
                  <div className={cs.pipelineRow__icon_mobile}>
                    {row.icon === "dna" && <DnaIcon />}
                    {row.icon === "microbe" && <MicrobeIcon />}
                    {row.icon === "virus" && <VirusIcon />}
                    <h3>{row.title}</h3>
                    <div className={cs.pipelineRow__accordionIcon}>
                      {(rowIndex === 0 && accordion1Open) ||
                      (rowIndex === 1 && accordion2Open) ||
                      (rowIndex === 2 && accordion3Open) ? (
                        <MinusIcon />
                      ) : (
                        <PlusIcon />
                      )}
                    </div>
                  </div>
                </div>
                <div
                  className={`${cs.pipelineRow__content_accordion} ${
                    rowIndex === 0 && accordion1Open ? cs["open"] : ""
                  } ${rowIndex === 1 && accordion2Open ? cs["open"] : ""} ${
                    rowIndex === 2 && accordion3Open ? cs["open"] : ""
                  }`}
                >
                  <img
                    style={{
                      opacity:
                        (rowIndex === 0 && accordion1Open) ||
                        (rowIndex === 1 && accordion2Open) ||
                        (rowIndex === 2 && accordion3Open)
                          ? 1
                          : 0,
                    }}
                    src={
                      rowIndex === 0
                        ? PipelineMetagenomicImg
                        : rowIndex === 1
                        ? PipelineAntimicrobialImg
                        : PipelineViralImg
                    }
                    alt=""
                  />
                  <p className={cs.pipelineRow__content_description}>
                    {row.copy}
                  </p>
                  <div className={`${cs.pipelineRow__table} ${cs[row.theme]}`}>
                    {row.tableRows.map((row, tableRowIndex) => (
                      <div
                        className={cs.pipelineRow__table_row}
                        key={`pipelineTableRow--${rowIndex}-${tableRowIndex}`}
                      >
                        <div className={cs.pipelineRow__table_rowCell}>
                          <p className={cs.pipelineRow__table_rowTitle}>
                            {row.title}
                          </p>
                        </div>
                        <div className={cs.pipelineRow__table_rowCell}>
                          <p className={cs.pipelineRow__table_rowCopy}>
                            {row.copy}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
        <div className={cs.pipelineSectionDesktopImg} ref={desktopImg}>
          <img
            style={{ opacity: imageSelected === 0 ? 1 : 0 }}
            src={PipelineMetagenomicImg}
            alt=""
          />
          <img
            style={{ opacity: imageSelected === 1 ? 1 : 0 }}
            src={PipelineAntimicrobialImg}
            alt=""
          />
          <img
            style={{ opacity: imageSelected === 2 ? 1 : 0 }}
            src={PipelineViralImg}
            alt=""
          />
        </div>
      </div>
    </section>
  );
};

export default PipelineSection;
