/* eslint-disable */
// WARNING: This file is auto-generated by @graphql-codegen. To update this file, run `npm run codegen` from the root of this project.
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type BulkDownload = {
  __typename?: "BulkDownload";
  analysisCount?: Maybe<Scalars["Int"]>;
  analysisType?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  downloadName?: Maybe<Scalars["String"]>;
  downloadType?: Maybe<Scalars["String"]>;
  ecsTaskArn?: Maybe<Scalars["String"]>;
  errorMessage?: Maybe<Scalars["String"]>;
  executionType?: Maybe<Scalars["String"]>;
  fileSize?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["Int"]>;
  logUrl?: Maybe<Scalars["String"]>;
  numSamples?: Maybe<Scalars["Int"]>;
  outputFileSize?: Maybe<Scalars["Int"]>;
  params?: Maybe<BulkDownloadParams>;
  paramsJson?: Maybe<Scalars["String"]>;
  presignedOutputUrl?: Maybe<Scalars["String"]>;
  progress?: Maybe<Scalars["Float"]>;
  status?: Maybe<Scalars["String"]>;
  updatedAt?: Maybe<Scalars["String"]>;
  userId?: Maybe<Scalars["Int"]>;
  userName?: Maybe<Scalars["String"]>;
};

export type BulkDownloadParams = {
  __typename?: "BulkDownloadParams";
  background?: Maybe<BulkDownloadParamsBackground>;
};

export type BulkDownloadParamsBackground = {
  __typename?: "BulkDownloadParamsBackground";
  displayName?: Maybe<Scalars["String"]>;
  value?: Maybe<Scalars["Int"]>;
};

export type BulkDownloadType = {
  __typename?: "BulkDownloadType";
  category?: Maybe<Scalars["String"]>;
  description?: Maybe<Scalars["String"]>;
  displayName?: Maybe<Scalars["String"]>;
  executionType?: Maybe<Scalars["String"]>;
  fields?: Maybe<Array<Maybe<BulkDownloadTypeField>>>;
  fileTypeDisplay?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
  workflows?: Maybe<Array<Maybe<Scalars["String"]>>>;
};

export type BulkDownloadTypeField = {
  __typename?: "BulkDownloadTypeField";
  displayName?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
};

export type Mutation = {
  __typename?: "Mutation";
  updateSampleNotes?: Maybe<UpdateSampleNotesResponse>;
};

export type MutationUpdateSampleNotesArgs = {
  authenticityToken: Scalars["String"];
  sampleId: Scalars["Int"];
  value: Scalars["String"];
};

export type OutputFile = {
  __typename?: "OutputFile";
  displayName?: Maybe<Scalars["String"]>;
  url?: Maybe<Scalars["String"]>;
};

export type PipelineData = {
  __typename?: "PipelineData";
  stages?: Maybe<Array<Maybe<Stage>>>;
  status?: Maybe<Scalars["String"]>;
};

export type Project = {
  __typename?: "Project";
  background_flag?: Maybe<Scalars["Int"]>;
  createdAt?: Maybe<Scalars["String"]>;
  days_to_keep_sample_private?: Maybe<Scalars["Int"]>;
  description?: Maybe<Scalars["String"]>;
  id?: Maybe<Scalars["Int"]>;
  max_input_fragments_default?: Maybe<Scalars["Int"]>;
  name?: Maybe<Scalars["String"]>;
  public_access?: Maybe<Scalars["Int"]>;
  subsample_default?: Maybe<Scalars["Int"]>;
  total_sample_count?: Maybe<Scalars["Int"]>;
  updated_at?: Maybe<Scalars["String"]>;
};

export type Query = {
  __typename?: "Query";
  bulkDownload?: Maybe<BulkDownload>;
  bulkDownloadType?: Maybe<BulkDownloadType>;
  pipelineData?: Maybe<PipelineData>;
  project?: Maybe<Project>;
  sample?: Maybe<Sample>;
  taxonDescription?: Maybe<Array<Maybe<TaxonDescription>>>;
  taxonDist?: Maybe<TaxonDist>;
};

export type QueryBulkDownloadArgs = {
  bulkDownloadId: Scalars["Int"];
};

export type QueryBulkDownloadTypeArgs = {
  bulkDownloadId: Scalars["Int"];
};

export type QueryPipelineDataArgs = {
  pipelineVersion?: InputMaybe<Scalars["String"]>;
  sampleId: Scalars["Int"];
};

export type QueryProjectArgs = {
  id: Scalars["Int"];
};

export type QuerySampleArgs = {
  sampleId: Scalars["Int"];
};

export type QueryTaxonDescriptionArgs = {
  taxonIdList?: InputMaybe<Array<Scalars["Int"]>>;
};

export type QueryTaxonDistArgs = {
  backgroundId: Scalars["Int"];
  taxId: Scalars["Int"];
};

export type Sample = {
  __typename?: "Sample";
  alignmentConfigName?: Maybe<Scalars["String"]>;
  basespaceAccessToken?: Maybe<Scalars["String"]>;
  createdAt?: Maybe<Scalars["String"]>;
  dagVars?: Maybe<Scalars["String"]>;
  defaultBackgroundId?: Maybe<Scalars["Int"]>;
  doNotProcess?: Maybe<Scalars["Boolean"]>;
  hostGenomeId?: Maybe<Scalars["Int"]>;
  id?: Maybe<Scalars["Int"]>;
  initialWorkflow?: Maybe<Scalars["String"]>;
  maxInputFragments?: Maybe<Scalars["Int"]>;
  name?: Maybe<Scalars["String"]>;
  pipelineBranch?: Maybe<Scalars["String"]>;
  pipelineCommit?: Maybe<Scalars["String"]>;
  pipelineExecutionStrategy?: Maybe<Scalars["String"]>;
  privateUntil?: Maybe<Scalars["String"]>;
  projectId?: Maybe<Scalars["Int"]>;
  s3Bowtie2IndexPath?: Maybe<Scalars["String"]>;
  s3PreloadResultPath?: Maybe<Scalars["String"]>;
  s3StarIndexPath?: Maybe<Scalars["String"]>;
  sampleNotes?: Maybe<Scalars["String"]>;
  status?: Maybe<Scalars["String"]>;
  subsample?: Maybe<Scalars["Int"]>;
  updatedAt?: Maybe<Scalars["String"]>;
  uploadError?: Maybe<Scalars["String"]>;
  uploadedFromBasespace?: Maybe<Scalars["Int"]>;
  useTaxonWhitelist?: Maybe<Scalars["Boolean"]>;
  userId?: Maybe<Scalars["Int"]>;
  webCommit?: Maybe<Scalars["String"]>;
};

export type Stage = {
  __typename?: "Stage";
  jobStatus?: Maybe<Scalars["String"]>;
  name?: Maybe<Scalars["String"]>;
  steps?: Maybe<Array<Maybe<Step>>>;
};

export type Step = {
  __typename?: "Step";
  description?: Maybe<Scalars["String"]>;
  endTime?: Maybe<Scalars["String"]>;
  inputEdges?: Maybe<Array<Maybe<Scalars["Int"]>>>;
  inputVariables?: Maybe<Array<Maybe<Variable>>>;
  name?: Maybe<Scalars["String"]>;
  outputEdges?: Maybe<Array<Maybe<Scalars["Int"]>>>;
  outputFiles?: Maybe<Array<Maybe<OutputFile>>>;
  resources?: Maybe<Array<Maybe<Scalars["String"]>>>;
  startTime?: Maybe<Scalars["String"]>;
  status?: Maybe<Scalars["String"]>;
};

export type TaxonDescription = {
  __typename?: "TaxonDescription";
  summary?: Maybe<Scalars["String"]>;
  taxId?: Maybe<Scalars["Int"]>;
  title?: Maybe<Scalars["String"]>;
  wikiUrl?: Maybe<Scalars["String"]>;
};

export type TaxonDist = {
  __typename?: "TaxonDist";
  mergedNtNr?: Maybe<TaxonDistributionObject>;
  nr?: Maybe<TaxonDistributionObject>;
  nt?: Maybe<TaxonDistributionObject>;
};

export type TaxonDistributionObject = {
  __typename?: "TaxonDistributionObject";
  mean?: Maybe<Scalars["Float"]>;
  rpmList?: Maybe<Array<Maybe<Scalars["Float"]>>>;
  stdev?: Maybe<Scalars["Float"]>;
  taxLevel?: Maybe<Scalars["Int"]>;
};

export type UpdateSampleNotesResponse = {
  __typename?: "UpdateSampleNotesResponse";
  errors?: Maybe<Array<Maybe<Scalars["String"]>>>;
  message?: Maybe<Scalars["String"]>;
  sample?: Maybe<Sample>;
  status?: Maybe<Scalars["String"]>;
};

export type Variable = {
  __typename?: "Variable";
  name?: Maybe<Scalars["String"]>;
  type?: Maybe<Scalars["String"]>;
};

export type GetSampleQueryVariables = Exact<{
  sampleId: Scalars["Int"];
}>;

export type GetSampleQuery = {
  __typename?: "Query";
  sample?: {
    __typename?: "Sample";
    id?: number | null;
    name?: string | null;
    sampleNotes?: string | null;
  } | null;
};

export type UpdateSampleNotesMutationVariables = Exact<{
  sampleId: Scalars["Int"];
  value: Scalars["String"];
  authenticityToken: Scalars["String"];
}>;

export type UpdateSampleNotesMutation = {
  __typename?: "Mutation";
  updateSampleNotes?: {
    __typename?: "UpdateSampleNotesResponse";
    message?: string | null;
    errors?: Array<string | null> | null;
    sample?: {
      __typename?: "Sample";
      sampleNotes?: string | null;
      id?: number | null;
    } | null;
  } | null;
};

export type TaxonDescriptionQueryVariables = Exact<{
  taxonIdList?: InputMaybe<Array<Scalars["Int"]> | Scalars["Int"]>;
}>;

export type TaxonDescriptionQuery = {
  __typename?: "Query";
  taxonDescription?: Array<{
    __typename?: "TaxonDescription";
    summary?: string | null;
    taxId?: number | null;
    title?: string | null;
    wikiUrl?: string | null;
  } | null> | null;
};

export type TaxonDistributionQueryVariables = Exact<{
  backgroundId: Scalars["Int"];
  taxId: Scalars["Int"];
}>;

export type TaxonDistributionQuery = {
  __typename?: "Query";
  taxonDist?: {
    __typename?: "TaxonDist";
    mergedNtNr?: {
      __typename?: "TaxonDistributionObject";
      mean?: number | null;
      rpmList?: Array<number | null> | null;
      stdev?: number | null;
      taxLevel?: number | null;
    } | null;
    nr?: {
      __typename?: "TaxonDistributionObject";
      taxLevel?: number | null;
      mean?: number | null;
      stdev?: number | null;
      rpmList?: Array<number | null> | null;
    } | null;
    nt?: {
      __typename?: "TaxonDistributionObject";
      taxLevel?: number | null;
      mean?: number | null;
      stdev?: number | null;
      rpmList?: Array<number | null> | null;
    } | null;
  } | null;
};

export const GetSampleDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "GetSample" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "sampleId" },
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "sample" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "sampleId" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "sampleId" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "id" } },
                { kind: "Field", name: { kind: "Name", value: "name" } },
                { kind: "Field", name: { kind: "Name", value: "sampleNotes" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GetSampleQuery, GetSampleQueryVariables>;
export const UpdateSampleNotesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "mutation",
      name: { kind: "Name", value: "UpdateSampleNotes" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "sampleId" },
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "value" },
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "String" },
            },
          },
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "authenticityToken" },
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "String" },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "updateSampleNotes" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "sampleId" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "sampleId" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "value" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "value" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "authenticityToken" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "authenticityToken" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "sample" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "sampleNotes" },
                      },
                      { kind: "Field", name: { kind: "Name", value: "id" } },
                    ],
                  },
                },
                { kind: "Field", name: { kind: "Name", value: "message" } },
                { kind: "Field", name: { kind: "Name", value: "errors" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  UpdateSampleNotesMutation,
  UpdateSampleNotesMutationVariables
>;
export const TaxonDescriptionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "TaxonDescription" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "taxonIdList" },
          },
          type: {
            kind: "ListType",
            type: {
              kind: "NonNullType",
              type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "taxonDescription" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "taxonIdList" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "taxonIdList" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "summary" } },
                { kind: "Field", name: { kind: "Name", value: "taxId" } },
                { kind: "Field", name: { kind: "Name", value: "title" } },
                { kind: "Field", name: { kind: "Name", value: "wikiUrl" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  TaxonDescriptionQuery,
  TaxonDescriptionQueryVariables
>;
export const TaxonDistributionDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "TaxonDistribution" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "backgroundId" },
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
          },
        },
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "taxId" },
          },
          type: {
            kind: "NonNullType",
            type: { kind: "NamedType", name: { kind: "Name", value: "Int" } },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "taxonDist" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "backgroundId" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "backgroundId" },
                },
              },
              {
                kind: "Argument",
                name: { kind: "Name", value: "taxId" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "taxId" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                {
                  kind: "Field",
                  name: { kind: "Name", value: "mergedNtNr" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "Field", name: { kind: "Name", value: "mean" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "rpmList" },
                      },
                      { kind: "Field", name: { kind: "Name", value: "stdev" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "taxLevel" },
                      },
                    ],
                  },
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "nr" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "taxLevel" },
                      },
                      { kind: "Field", name: { kind: "Name", value: "mean" } },
                      { kind: "Field", name: { kind: "Name", value: "stdev" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "rpmList" },
                      },
                    ],
                  },
                },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "nt" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "taxLevel" },
                      },
                      { kind: "Field", name: { kind: "Name", value: "mean" } },
                      { kind: "Field", name: { kind: "Name", value: "stdev" } },
                      {
                        kind: "Field",
                        name: { kind: "Name", value: "rpmList" },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  TaxonDistributionQuery,
  TaxonDistributionQueryVariables
>;
