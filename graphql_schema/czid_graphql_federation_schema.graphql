"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

directive @oneOf on OBJECT | INTERFACE | INPUT_OBJECT

directive @example(subgraph: String, value: ObjMap) on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @resolveRoot(subgraph: String) on FIELD_DEFINITION

directive @httpOperation(subgraph: String, path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap, jsonApiFields: Boolean) on FIELD_DEFINITION

directive @transport(subgraph: String, kind: String, location: String, headers: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

type Accession implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  accessionId: String!
  accessionName: String!
  upstreamDatabase(where: UpstreamDatabaseWhereClause = null, orderBy: [UpstreamDatabaseOrderByClause!] = []): UpstreamDatabase
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null
    orderBy: [ConsensusGenomeOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type AccessionAggregate {
  aggregate: [AccessionAggregateFunctions!]
}

type AccessionAggregateFunctions {
  sum: AccessionNumericalColumns
  avg: AccessionNumericalColumns
  stddev: AccessionNumericalColumns
  variance: AccessionNumericalColumns
  min: AccessionMinMaxColumns
  max: AccessionMinMaxColumns
  groupBy: AccessionGroupByOptions
  count(distinct: Boolean = false, columns: AccessionCountColumns = null): Int
}

"""A connection to a list of items."""
type AccessionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [AccessionEdge!]!
}

enum AccessionCountColumns {
  accessionId
  accessionName
  upstreamDatabase
  consensusGenomes
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input AccessionCreateInput {
  accessionId: String!
  accessionName: String!
  upstreamDatabaseId: ID!
  producingRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type AccessionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Accession!
}

type AccessionGroupByOptions {
  accessionId: String
  accessionName: String
  upstreamDatabase: UpstreamDatabaseGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type AccessionMinMaxColumns {
  accessionId: String
  accessionName: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type AccessionNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input AccessionOrderByClause {
  accessionId: orderBy
  accessionName: orderBy
  upstreamDatabase: UpstreamDatabaseOrderByClause
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input AccessionUpdateInput {
  accessionName: String = null
}

input AccessionWhereClause {
  accessionId: StrComparators
  accessionName: StrComparators
  upstreamDatabase: UpstreamDatabaseWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input AccessionWhereClauseMutations {
  id: UUIDComparators
}

type AlignmentConfig {
  createdAt: ISO8601DateTime!
  indexDirSuffix: String
  lineageVersion: String!
  lineageVersionOld: Int
  name: String
  s3Accession2taxidPath: String
  s3DeuterostomeDbPath: String
  s3LineagePath: String
  s3NrDbPath: String
  s3NrLocDbPath: String
  s3NtDbPath: String
  s3NtInfoDbPath: String
  s3NtLocDbPath: String
  s3TaxonBlacklistPath: String
  updatedAt: ISO8601DateTime!
}

type AmrDeprecatedResults {
  id: Int
  gene: String
  allele: String
  coverage: Float
  depth: Float
  pipeline_run_id: Int
  drug_family: String
  created_at: String
  updated_at: String
  annotation_gene: String
  genbank_accession: String
  total_reads: Int
  rpm: Float
  dpm: Float
}

type AmrWorkflowResults {
  metric_amr: query_AmrWorkflowResults_metric_amr
  amr_hit: [query_AmrWorkflowResults_amr_hit_items]
}

input Annotation {
  name: String!
}

type AppConfig {
  key: String!
  value: String!
}

type Background {
  other_backgrounds: [query_Background_other_backgrounds_items]
  owned_backgrounds: [JSON]
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

input BoolComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

type BulkDownload implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  downloadType: BulkDownloadType!
  downloadDisplayName: String!
  fileId: ID
  file(where: FileWhereClause = null): File
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type BulkDownloadAggregate {
  aggregate: [BulkDownloadAggregateFunctions!]
}

type BulkDownloadAggregateFunctions {
  sum: BulkDownloadNumericalColumns
  avg: BulkDownloadNumericalColumns
  stddev: BulkDownloadNumericalColumns
  variance: BulkDownloadNumericalColumns
  min: BulkDownloadMinMaxColumns
  max: BulkDownloadMinMaxColumns
  groupBy: BulkDownloadGroupByOptions
  count(distinct: Boolean = false, columns: BulkDownloadCountColumns = null): Int
}

enum BulkDownloadCountColumns {
  downloadType
  downloadDisplayName
  file
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input BulkDownloadCreateInput {
  downloadType: BulkDownloadType!
  downloadDisplayName: String!
  producingRunId: ID = null
  collectionId: Int!
}

type BulkDownloadGroupByOptions {
  downloadType: BulkDownloadType
  downloadDisplayName: String
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type BulkDownloadMinMaxColumns {
  downloadDisplayName: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type BulkDownloadNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input BulkDownloadOrderByClause {
  downloadType: orderBy
  downloadDisplayName: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

enum BulkDownloadType {
  concatenate
  zip
}

input BulkDownloadTypeEnumComparators {
  _eq: BulkDownloadType
  _neq: BulkDownloadType
  _in: [BulkDownloadType!]
  _nin: [BulkDownloadType!]
  _gt: BulkDownloadType
  _gte: BulkDownloadType
  _lt: BulkDownloadType
  _lte: BulkDownloadType
  _is_null: BulkDownloadType
}

input BulkDownloadWhereClause {
  downloadType: BulkDownloadTypeEnumComparators
  downloadDisplayName: StrComparators
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input BulkDownloadWhereClauseMutations {
  id: UUIDComparators
}

type ConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  taxon(where: TaxonWhereClause = null, orderBy: [TaxonOrderByClause!] = []): Taxon
  sequencingRead(where: SequencingReadWhereClause = null, orderBy: [SequencingReadOrderByClause!] = []): SequencingRead
  referenceGenome(where: ReferenceGenomeWhereClause = null, orderBy: [ReferenceGenomeOrderByClause!] = []): ReferenceGenome
  accession(where: AccessionWhereClause = null, orderBy: [AccessionOrderByClause!] = []): Accession
  sequenceId: ID
  sequence(where: FileWhereClause = null): File
  metrics(where: MetricConsensusGenomeWhereClause = null, orderBy: [MetricConsensusGenomeOrderByClause!] = []): MetricConsensusGenome
  intermediateOutputsId: ID
  intermediateOutputs(where: FileWhereClause = null): File
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type ConsensusGenomeAggregate {
  aggregate: [ConsensusGenomeAggregateFunctions!]
}

type ConsensusGenomeAggregateFunctions {
  sum: ConsensusGenomeNumericalColumns
  avg: ConsensusGenomeNumericalColumns
  stddev: ConsensusGenomeNumericalColumns
  variance: ConsensusGenomeNumericalColumns
  min: ConsensusGenomeMinMaxColumns
  max: ConsensusGenomeMinMaxColumns
  groupBy: ConsensusGenomeGroupByOptions
  count(distinct: Boolean = false, columns: ConsensusGenomeCountColumns = null): Int
}

"""A connection to a list of items."""
type ConsensusGenomeConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [ConsensusGenomeEdge!]!
}

enum ConsensusGenomeCountColumns {
  taxon
  sequencingRead
  referenceGenome
  accession
  sequence
  metrics
  intermediateOutputs
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input ConsensusGenomeCreateInput {
  taxonId: ID!
  sequencingReadId: ID!
  referenceGenomeId: ID = null
  accessionId: ID = null
  producingRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type ConsensusGenomeEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: ConsensusGenome!
}

type ConsensusGenomeGroupByOptions {
  taxon: TaxonGroupByOptions
  sequencingRead: SequencingReadGroupByOptions
  referenceGenome: ReferenceGenomeGroupByOptions
  accession: AccessionGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ConsensusGenomeMinMaxColumns {
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ConsensusGenomeNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input ConsensusGenomeOrderByClause {
  taxon: TaxonOrderByClause
  sequencingRead: SequencingReadOrderByClause
  referenceGenome: ReferenceGenomeOrderByClause
  accession: AccessionOrderByClause
  metrics: MetricConsensusGenomeOrderByClause
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

type ConsensusGenomeOverviewRows {
  cgOverviewRows: [[String]]!
}

input ConsensusGenomeWhereClause {
  taxon: TaxonWhereClause
  sequencingRead: SequencingReadWhereClause
  referenceGenome: ReferenceGenomeWhereClause
  accession: AccessionWhereClause
  metrics: MetricConsensusGenomeWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input ConsensusGenomeWhereClauseMutations {
  id: UUIDComparators
}

type ConsensusGenomeWorkflowResults {
  metric_consensus_genome: query_ConsensusGenomeWorkflowResults_metric_consensus_genome
  reference_genome: query_ConsensusGenomeWorkflowResults_reference_genome
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload {
  archetypes: String
  email: String
  institution: String
  name: String
  role: Int
  segments: String
  sendActivation: Boolean
}

"""Date with time (isoformat)"""
scalar DateTime

input DatetimeComparators {
  _eq: DateTime
  _neq: DateTime
  _in: [DateTime!]
  _nin: [DateTime!]
  _gt: DateTime
  _gte: DateTime
  _lt: DateTime
  _lte: DateTime
  _is_null: DateTime
}

type DbSample {
  alignmentConfigName: String
  basespaceAccessToken: String
  clientUpdatedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  dagVars: String
  doNotProcess: Boolean!
  hostGenomeId: Int
  hostGenomeName: String
  id: Int!
  initialWorkflow: String!
  inputFiles: [InputFile!]!
  maxInputFragments: Int
  name: String
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  privateUntil: ISO8601DateTime
  projectId: Int
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleNotes: String
  status: String
  subsample: Int
  updatedAt: ISO8601DateTime!
  uploadError: String
  uploadedFromBasespace: Int!
  useTaxonWhitelist: Boolean!
  userId: Int!
  webCommit: String
}

type DeleteSamples {
  deleted_workflow_ids: [Int]
  error: String
}

type DerivedSampleOutput {
  hostGenomeName: String!
  pipelineRun: PipelineRun
  projectName: String!
  summaryStats: SampleSummaryStats
}

type Entity {
  id: ID!
  type: String!
  producingRunId: ID!
  ownerUserId: Int!
  collectionId: Int!
}

input EntityInputType {
  name: String!
  entityId: ID!
  entityType: String!
}

interface EntityInterface {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

input EntityWhereClause {
  id: UUIDComparators
  entityId: UUIDComparators
  producingRunId: IntComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
}

type File {
  id: ID!
  entityId: ID!
  entityFieldName: String!
  entity(where: EntityWhereClause = null): Entity
  status: FileStatus!
  protocol: FileAccessProtocol!
  namespace: String!
  path: String!
  fileFormat: String!
  compressionType: Int
  size: Int
  uploadError: String
  createdAt: DateTime!
  updatedAt: DateTime
  downloadLink(expiration: Int! = 3600): SignedURL
  contents: String
}

enum FileAccessProtocol {
  s3
  https
}

input FileCreate {
  name: String!
  fileFormat: String!
  compressionType: String = null
  protocol: FileAccessProtocol!
  namespace: String!
  path: String!
}

enum FileStatus {
  SUCCESS
  FAILED
  PENDING
}

input FileStatusEnumComparators {
  _eq: FileStatus
  _neq: FileStatus
  _in: [FileStatus!]
  _nin: [FileStatus!]
  _gt: FileStatus
  _gte: FileStatus
  _lt: FileStatus
  _lte: FileStatus
  _is_null: FileStatus
}

input FileUpload {
  name: String!
  fileFormat: String!
  compressionType: String = null
}

input FileWhereClause {
  id: UUIDComparators
  entityId: UUIDComparators
  entityFieldName: StrComparators
  status: FileStatusEnumComparators
  protocol: StrComparators
  namespace: StrComparators
  path: StrComparators
  fileFormat: StrComparators
  compressionType: StrComparators
  size: IntComparators
}

input FloatComparators {
  _eq: Float
  _neq: Float
  _in: [Float!]
  _nin: [Float!]
  _gt: Float
  _gte: Float
  _lt: Float
  _lte: Float
  _is_null: Float
}

type GenomicRange implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  fileId: ID
  file(where: FileWhereClause = null): File
  sequencingReads(
    where: SequencingReadWhereClause = null
    orderBy: [SequencingReadOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type GenomicRangeAggregate {
  aggregate: [GenomicRangeAggregateFunctions!]
}

type GenomicRangeAggregateFunctions {
  sum: GenomicRangeNumericalColumns
  avg: GenomicRangeNumericalColumns
  stddev: GenomicRangeNumericalColumns
  variance: GenomicRangeNumericalColumns
  min: GenomicRangeMinMaxColumns
  max: GenomicRangeMinMaxColumns
  groupBy: GenomicRangeGroupByOptions
  count(distinct: Boolean = false, columns: GenomicRangeCountColumns = null): Int
}

enum GenomicRangeCountColumns {
  file
  sequencingReads
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input GenomicRangeCreateInput {
  producingRunId: ID = null
  collectionId: Int!
}

type GenomicRangeGroupByOptions {
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type GenomicRangeMinMaxColumns {
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type GenomicRangeNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input GenomicRangeOrderByClause {
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input GenomicRangeWhereClause {
  sequencingReads: SequencingReadWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input GenomicRangeWhereClauseMutations {
  id: UUIDComparators
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an
object or as key for a cache. The ID type appears in a JSON response as a
String; however, it is not intended to be human-readable. When expected as an
input type, any string (such as `"4"`) or integer (such as `4`) input value will
be accepted as an ID.
"""
scalar GlobalID

type GraphQLFederationVersion {
  version: String
  gitCommit: String
}

type HostGenome {
  createdAt: ISO8601DateTime!
  defaultBackgroundId: Int
  id: Int!
  name: String!
  s3Bowtie2IndexPath: String!
  s3Minimap2IndexPath: String
  s3StarIndexPath: String!
  samplesCount: Int!
  skipDeuteroFilter: Int!
  taxaCategory: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: Int
}

type HostOrganism implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  railsHostGenomeId: Int
  name: String!
  version: String!
  category: HostOrganismCategory!
  isDeuterostome: Boolean!
  indexes(
    where: IndexFileWhereClause = null
    orderBy: [IndexFileOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): IndexFileConnection!
  indexesAggregate(where: IndexFileWhereClause = null): IndexFileAggregate
  samples(
    where: SampleWhereClause = null
    orderBy: [SampleOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SampleConnection!
  samplesAggregate(where: SampleWhereClause = null): SampleAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type HostOrganismAggregate {
  aggregate: [HostOrganismAggregateFunctions!]
}

type HostOrganismAggregateFunctions {
  sum: HostOrganismNumericalColumns
  avg: HostOrganismNumericalColumns
  stddev: HostOrganismNumericalColumns
  variance: HostOrganismNumericalColumns
  min: HostOrganismMinMaxColumns
  max: HostOrganismMinMaxColumns
  groupBy: HostOrganismGroupByOptions
  count(distinct: Boolean = false, columns: HostOrganismCountColumns = null): Int
}

enum HostOrganismCategory {
  human
  insect
  non_human_animal
  unknown
}

input HostOrganismCategoryEnumComparators {
  _eq: HostOrganismCategory
  _neq: HostOrganismCategory
  _in: [HostOrganismCategory!]
  _nin: [HostOrganismCategory!]
  _gt: HostOrganismCategory
  _gte: HostOrganismCategory
  _lt: HostOrganismCategory
  _lte: HostOrganismCategory
  _is_null: HostOrganismCategory
}

enum HostOrganismCountColumns {
  railsHostGenomeId
  name
  version
  category
  isDeuterostome
  indexes
  samples
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input HostOrganismCreateInput {
  railsHostGenomeId: Int = null
  name: String!
  version: String!
  category: HostOrganismCategory!
  isDeuterostome: Boolean!
  producingRunId: ID = null
  collectionId: Int!
}

type HostOrganismGroupByOptions {
  railsHostGenomeId: Int
  name: String
  version: String
  category: HostOrganismCategory
  isDeuterostome: Boolean
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type HostOrganismMinMaxColumns {
  railsHostGenomeId: Int
  name: String
  version: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type HostOrganismNumericalColumns {
  railsHostGenomeId: Int
  ownerUserId: Int
  collectionId: Int
}

input HostOrganismOrderByClause {
  railsHostGenomeId: orderBy
  name: orderBy
  version: orderBy
  category: orderBy
  isDeuterostome: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input HostOrganismUpdateInput {
  name: String = null
  version: String = null
  category: HostOrganismCategory = null
  isDeuterostome: Boolean = null
}

input HostOrganismWhereClause {
  railsHostGenomeId: IntComparators
  name: StrComparators
  version: StrComparators
  category: HostOrganismCategoryEnumComparators
  isDeuterostome: BoolComparators
  indexes: IndexFileWhereClause
  samples: SampleWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input HostOrganismWhereClauseMutations {
  id: UUIDComparators
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

type IndexFile implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  name: IndexTypes!
  version: String!
  fileId: ID
  file(where: FileWhereClause = null): File
  upstreamDatabase(where: UpstreamDatabaseWhereClause = null, orderBy: [UpstreamDatabaseOrderByClause!] = []): UpstreamDatabase
  hostOrganism(where: HostOrganismWhereClause = null, orderBy: [HostOrganismOrderByClause!] = []): HostOrganism
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type IndexFileAggregate {
  aggregate: [IndexFileAggregateFunctions!]
}

type IndexFileAggregateFunctions {
  sum: IndexFileNumericalColumns
  avg: IndexFileNumericalColumns
  stddev: IndexFileNumericalColumns
  variance: IndexFileNumericalColumns
  min: IndexFileMinMaxColumns
  max: IndexFileMinMaxColumns
  groupBy: IndexFileGroupByOptions
  count(distinct: Boolean = false, columns: IndexFileCountColumns = null): Int
}

"""A connection to a list of items."""
type IndexFileConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [IndexFileEdge!]!
}

enum IndexFileCountColumns {
  name
  version
  file
  upstreamDatabase
  hostOrganism
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input IndexFileCreateInput {
  name: IndexTypes!
  version: String!
  fileId: ID = null
  upstreamDatabaseId: ID = null
  hostOrganismId: ID = null
  producingRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type IndexFileEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: IndexFile!
}

type IndexFileGroupByOptions {
  name: IndexTypes
  version: String
  upstreamDatabase: UpstreamDatabaseGroupByOptions
  hostOrganism: HostOrganismGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type IndexFileMinMaxColumns {
  version: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type IndexFileNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input IndexFileOrderByClause {
  name: orderBy
  version: orderBy
  upstreamDatabase: UpstreamDatabaseOrderByClause
  hostOrganism: HostOrganismOrderByClause
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input IndexFileUpdateInput {
  name: IndexTypes = null
  version: String = null
}

input IndexFileWhereClause {
  name: IndexTypesEnumComparators
  version: StrComparators
  upstreamDatabase: UpstreamDatabaseWhereClause
  hostOrganism: HostOrganismWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input IndexFileWhereClauseMutations {
  id: UUIDComparators
}

enum IndexTypes {
  nt
  nt_loc
  nt_info
  nr
  nr_loc
  lineage
  accession2taxid
  deuterostome
  taxon_blacklist
  minimap2_long
  minimap2_short
  diamond
  star
  bowtie2
  bowtie2_v2
  minimap2_dna
  minimap2_rna
  hisat2
  kallisto
  original_transcripts_gtf
}

input IndexTypesEnumComparators {
  _eq: IndexTypes
  _neq: IndexTypes
  _in: [IndexTypes!]
  _nin: [IndexTypes!]
  _gt: IndexTypes
  _gte: IndexTypes
  _lt: IndexTypes
  _lte: IndexTypes
  _is_null: IndexTypes
}

type InputFile {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String
  parts: String
  presignedUrl: String
  sampleId: Int!
  source: String
  sourceType: String
  updatedAt: ISO8601DateTime
  uploadClient: String
}

input IntComparators {
  _eq: Int
  _neq: Int
  _in: [Int!]
  _nin: [Int!]
  _gt: Int
  _gte: Int
  _lt: Int
  _lte: Int
  _is_null: Int
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LimitOffsetClause {
  limit: Int
  offset: Int
}

type Metadatum implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  sample(where: SampleWhereClause = null, orderBy: [SampleOrderByClause!] = []): Sample
  fieldName: String!
  value: String!
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type MetadatumAggregate {
  aggregate: [MetadatumAggregateFunctions!]
}

type MetadatumAggregateFunctions {
  sum: MetadatumNumericalColumns
  avg: MetadatumNumericalColumns
  stddev: MetadatumNumericalColumns
  variance: MetadatumNumericalColumns
  min: MetadatumMinMaxColumns
  max: MetadatumMinMaxColumns
  groupBy: MetadatumGroupByOptions
  count(distinct: Boolean = false, columns: MetadatumCountColumns = null): Int
}

"""A connection to a list of items."""
type MetadatumConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [MetadatumEdge!]!
}

enum MetadatumCountColumns {
  sample
  fieldName
  value
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input MetadatumCreateInput {
  sampleId: ID!
  fieldName: String!
  value: String!
  producingRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type MetadatumEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Metadatum!
}

type MetadatumGroupByOptions {
  sample: SampleGroupByOptions
  fieldName: String
  value: String
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MetadatumMinMaxColumns {
  fieldName: String
  value: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MetadatumNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input MetadatumOrderByClause {
  sample: SampleOrderByClause
  fieldName: orderBy
  value: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input MetadatumUpdateInput {
  value: String = null
}

input MetadatumWhereClause {
  sample: SampleWhereClause
  fieldName: StrComparators
  value: StrComparators
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input MetadatumWhereClauseMutations {
  id: UUIDComparators
}

type MetricConsensusGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  consensusGenome(where: ConsensusGenomeWhereClause = null, orderBy: [ConsensusGenomeOrderByClause!] = []): ConsensusGenome
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
  coverageViz: [[Float!]!]
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type MetricConsensusGenomeAggregate {
  aggregate: [MetricConsensusGenomeAggregateFunctions!]
}

type MetricConsensusGenomeAggregateFunctions {
  sum: MetricConsensusGenomeNumericalColumns
  avg: MetricConsensusGenomeNumericalColumns
  stddev: MetricConsensusGenomeNumericalColumns
  variance: MetricConsensusGenomeNumericalColumns
  min: MetricConsensusGenomeMinMaxColumns
  max: MetricConsensusGenomeMinMaxColumns
  groupBy: MetricConsensusGenomeGroupByOptions
  count(distinct: Boolean = false, columns: MetricConsensusGenomeCountColumns = null): Int
}

enum MetricConsensusGenomeCountColumns {
  consensusGenome
  referenceGenomeLength
  percentGenomeCalled
  percentIdentity
  gcPercent
  totalReads
  mappedReads
  refSnps
  nActg
  nMissing
  nAmbiguous
  coverageDepth
  coverageBreadth
  coverageBinSize
  coverageTotalLength
  coverageViz
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input MetricConsensusGenomeCreateInput {
  consensusGenomeId: ID!
  referenceGenomeLength: Float = null
  percentGenomeCalled: Float = null
  percentIdentity: Float = null
  gcPercent: Float = null
  totalReads: Int = null
  mappedReads: Int = null
  refSnps: Int = null
  nActg: Int = null
  nMissing: Int = null
  nAmbiguous: Int = null
  coverageDepth: Float = null
  coverageBreadth: Float = null
  coverageBinSize: Float = null
  coverageTotalLength: Int = null
  coverageViz: [[Float!]!] = null
  producingRunId: ID = null
  collectionId: Int!
}

type MetricConsensusGenomeGroupByOptions {
  consensusGenome: ConsensusGenomeGroupByOptions
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
  coverageViz: [[Float!]!]
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MetricConsensusGenomeMinMaxColumns {
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MetricConsensusGenomeNumericalColumns {
  referenceGenomeLength: Float
  percentGenomeCalled: Float
  percentIdentity: Float
  gcPercent: Float
  totalReads: Int
  mappedReads: Int
  refSnps: Int
  nActg: Int
  nMissing: Int
  nAmbiguous: Int
  coverageDepth: Float
  coverageBreadth: Float
  coverageBinSize: Float
  coverageTotalLength: Int
  ownerUserId: Int
  collectionId: Int
}

input MetricConsensusGenomeOrderByClause {
  consensusGenome: ConsensusGenomeOrderByClause
  referenceGenomeLength: orderBy
  percentGenomeCalled: orderBy
  percentIdentity: orderBy
  gcPercent: orderBy
  totalReads: orderBy
  mappedReads: orderBy
  refSnps: orderBy
  nActg: orderBy
  nMissing: orderBy
  nAmbiguous: orderBy
  coverageDepth: orderBy
  coverageBreadth: orderBy
  coverageBinSize: orderBy
  coverageTotalLength: orderBy
  coverageViz: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input MetricConsensusGenomeWhereClause {
  consensusGenome: ConsensusGenomeWhereClause
  referenceGenomeLength: FloatComparators
  percentGenomeCalled: FloatComparators
  percentIdentity: FloatComparators
  gcPercent: FloatComparators
  totalReads: IntComparators
  mappedReads: IntComparators
  refSnps: IntComparators
  nActg: IntComparators
  nMissing: IntComparators
  nAmbiguous: IntComparators
  coverageDepth: FloatComparators
  coverageBreadth: FloatComparators
  coverageBinSize: FloatComparators
  coverageTotalLength: IntComparators
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input MetricConsensusGenomeWhereClauseMutations {
  id: UUIDComparators
}

type MngsRunInfo {
  createdAt: ISO8601DateTime
  finalized: Int
  reportReady: Boolean
  resultStatusDescription: String
  totalRuntime: Int
  withAssembly: Int
}

type MngsWorkflowResults {
  metric_mngs: query_MngsWorkflowResults_metric_mngs
  taxon_hit_results: query_MngsWorkflowResults_taxon_hit_results
  fed_lineage: [query_MngsWorkflowResults_fed_lineage_items]
}

type MultipartUploadCredentials {
  protocol: String!
  namespace: String!
  path: String!
  accessKeyId: String!
  secretAccessKey: String!
  sessionToken: String!
  expiration: String!
}

type MultipartUploadResponse {
  credentials: MultipartUploadCredentials!
  file: File!
}

type Mutation {
  createWorkflowRun(input: RunWorkflowVersionInput!): WorkflowRun!
  updateWorkflowRun(input: WorkflowRunUpdateInput!, where: WorkflowRunWhereClauseMutations!): [WorkflowRun!]!
  deleteWorkflowRun(where: WorkflowRunWhereClauseMutations!): [WorkflowRun!]!
  createWorkflow(input: WorkflowCreateInput!): Workflow!
  updateWorkflow(input: WorkflowUpdateInput!, where: WorkflowWhereClauseMutations!): [Workflow!]!
  deleteWorkflow(where: WorkflowWhereClauseMutations!): [Workflow!]!
  createWorkflowRunStep(input: WorkflowRunStepCreateInput!): WorkflowRunStep!
  updateWorkflowRunStep(input: WorkflowRunStepUpdateInput!, where: WorkflowRunStepWhereClauseMutations!): [WorkflowRunStep!]!
  deleteWorkflowRunStep(where: WorkflowRunStepWhereClauseMutations!): [WorkflowRunStep!]!
  createWorkflowRunEntityInput(input: WorkflowRunEntityInputCreateInput!): WorkflowRunEntityInput!
  deleteWorkflowRunEntityInput(where: WorkflowRunEntityInputWhereClauseMutations!): [WorkflowRunEntityInput!]!
  createWorkflowVersion(input: WorkflowVersionCreateInput!): WorkflowVersion!
  deleteWorkflowVersion(where: WorkflowVersionWhereClauseMutations!): [WorkflowVersion!]!
  runWorkflowVersion(input: RunWorkflowVersionInput!): WorkflowRun!
  runWorkflowRun(workflowRunId: ID!): WorkflowRun!
  createFile(entityId: ID!, entityFieldName: String!, file: FileCreate!): File!
  uploadFile(entityId: ID!, entityFieldName: String!, file: FileUpload!, expiration: Int! = 3600): MultipartUploadResponse!
  uploadTemporaryFile(expiration: Int! = 3600): MultipartUploadResponse!
  markUploadComplete(fileId: ID!): File!
  concatenateFiles(ids: [UUID!]!): SignedURL!
  createSample(input: SampleCreateInput!): Sample!
  updateSample(input: SampleUpdateInput!, where: SampleWhereClauseMutations!): [Sample!]!
  deleteSample(where: SampleWhereClauseMutations!): [Sample!]!
  createSequencingRead(input: SequencingReadCreateInput!): SequencingRead!
  updateSequencingRead(input: SequencingReadUpdateInput!, where: SequencingReadWhereClauseMutations!): [SequencingRead!]!
  deleteSequencingRead(where: SequencingReadWhereClauseMutations!): [SequencingRead!]!
  createGenomicRange(input: GenomicRangeCreateInput!): GenomicRange!
  deleteGenomicRange(where: GenomicRangeWhereClauseMutations!): [GenomicRange!]!
  createReferenceGenome(input: ReferenceGenomeCreateInput!): ReferenceGenome!
  updateReferenceGenome(input: ReferenceGenomeUpdateInput!, where: ReferenceGenomeWhereClauseMutations!): [ReferenceGenome!]!
  deleteReferenceGenome(where: ReferenceGenomeWhereClauseMutations!): [ReferenceGenome!]!
  createAccession(input: AccessionCreateInput!): Accession!
  updateAccession(input: AccessionUpdateInput!, where: AccessionWhereClauseMutations!): [Accession!]!
  deleteAccession(where: AccessionWhereClauseMutations!): [Accession!]!
  createHostOrganism(input: HostOrganismCreateInput!): HostOrganism!
  updateHostOrganism(input: HostOrganismUpdateInput!, where: HostOrganismWhereClauseMutations!): [HostOrganism!]!
  deleteHostOrganism(where: HostOrganismWhereClauseMutations!): [HostOrganism!]!
  createMetadatum(input: MetadatumCreateInput!): Metadatum!
  updateMetadatum(input: MetadatumUpdateInput!, where: MetadatumWhereClauseMutations!): [Metadatum!]!
  deleteMetadatum(where: MetadatumWhereClauseMutations!): [Metadatum!]!
  createConsensusGenome(input: ConsensusGenomeCreateInput!): ConsensusGenome!
  deleteConsensusGenome(where: ConsensusGenomeWhereClauseMutations!): [ConsensusGenome!]!
  createMetricConsensusGenome(input: MetricConsensusGenomeCreateInput!): MetricConsensusGenome!
  deleteMetricConsensusGenome(where: MetricConsensusGenomeWhereClauseMutations!): [MetricConsensusGenome!]!
  createTaxon(input: TaxonCreateInput!): Taxon!
  updateTaxon(input: TaxonUpdateInput!, where: TaxonWhereClauseMutations!): [Taxon!]!
  deleteTaxon(where: TaxonWhereClauseMutations!): [Taxon!]!
  createUpstreamDatabase(input: UpstreamDatabaseCreateInput!): UpstreamDatabase!
  updateUpstreamDatabase(input: UpstreamDatabaseUpdateInput!, where: UpstreamDatabaseWhereClauseMutations!): [UpstreamDatabase!]!
  deleteUpstreamDatabase(where: UpstreamDatabaseWhereClauseMutations!): [UpstreamDatabase!]!
  createIndexFile(input: IndexFileCreateInput!): IndexFile!
  updateIndexFile(input: IndexFileUpdateInput!, where: IndexFileWhereClauseMutations!): [IndexFile!]!
  deleteIndexFile(where: IndexFileWhereClauseMutations!): [IndexFile!]!
  createBulkDownload(input: BulkDownloadCreateInput!): BulkDownload!
  deleteBulkDownload(where: BulkDownloadWhereClauseMutations!): [BulkDownload!]!
  createUser(archetypes: String, email: String!, institution: String, name: String, role: Int, segments: String, sendActivation: Boolean): CreateUserPayload!
  CreateBulkDownload(input: mutationInput_CreateBulkDownload_input_Input): JSON
  DeleteSamples(input: mutationInput_DeleteSamples_input_Input): DeleteSamples
  UpdateSampleNotes(sampleId: String, input: mutationInput_UpdateSampleNotes_input_Input): UpdateSampleNotes
  UpdateSampleName(sampleId: String, input: mutationInput_UpdateSampleNotes_input_Input): UpdateSampleName
  KickoffWGSWorkflow(sampleId: String, input: mutationInput_KickoffWGSWorkflow_input_Input): [mutation_KickoffWGSWorkflow_items]
  KickoffAMRWorkflow(sampleId: String, input: mutationInput_KickoffAMRWorkflow_input_Input): [mutation_KickoffWGSWorkflow_items]
  UpdateMetadata(sampleId: String, input: mutationInput_UpdateMetadata_input_Input): UpdateMetadataReponse
}

type mutation_KickoffWGSWorkflow_items {
  id: String
  status: String
  workflow: String
  wdl_version: String
  executed_at: String
  deprecated: Boolean
  input_error: JSON
  inputs: mutation_KickoffWGSWorkflow_items_inputs
  parsed_cached_results: mutation_KickoffWGSWorkflow_items_parsed_cached_results
  run_finalized: Boolean
}

type mutation_KickoffWGSWorkflow_items_inputs {
  accession_id: JSON
  accession_name: JSON
  taxon_id: JSON
  taxon_name: JSON
  technology: String
  card_version: String
  wildcard_version: String
}

type mutation_KickoffWGSWorkflow_items_parsed_cached_results {
  quality_metrics: mutation_KickoffWGSWorkflow_items_parsed_cached_results_quality_metrics
}

type mutation_KickoffWGSWorkflow_items_parsed_cached_results_quality_metrics {
  total_reads: Int
  qc_percent: Float
  adjusted_remaining_reads: Int
  compression_ratio: Float
  total_ercc_reads: Int
  fraction_subsampled: Float
  insert_size_mean: JSON
  insert_size_standard_deviation: JSON
  percent_remaining: Float
}

input mutationInput_CreateBulkDownload_input_Input {
  downloadType: String
  workflowRunIds: [Int]
  workflowRunIdsStrings: [String]
  workflow: String
  downloadFormat: String
  authenticityToken: String
}

input mutationInput_DeleteSamples_input_Input {
  ids: [Int]
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffAMRWorkflow_input_Input {
  inputs_json: mutationInput_KickoffAMRWorkflow_input_inputs_json_Input
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffAMRWorkflow_input_inputs_json_Input {
  start_from_mngs: Boolean
}

input mutationInput_KickoffWGSWorkflow_input_Input {
  inputs_json: mutationInput_KickoffWGSWorkflow_input_inputs_json_Input
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffWGSWorkflow_input_inputs_json_Input {
  accession_id: String
  accession_name: String
  taxon_id: String
  taxon_name: String
  alignment_config_name: String
  technology: String
}

input mutationInput_UpdateMetadata_input_Input {
  field: String!
  value: mutationInput_UpdateMetadata_input_value_Input!
  authenticityToken: String!
}

input mutationInput_UpdateMetadata_input_value_Input {
  String: String
  query_SampleMetadata_metadata_items_location_validated_value_oneOf_1_Input: query_SampleMetadata_metadata_items_location_validated_value_oneOf_1_Input
}

input mutationInput_UpdateSampleNotes_input_Input {
  value: String!
  authenticityToken: String!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
}

scalar ObjMap

enum orderBy {
  asc
  asc_nulls_first
  asc_nulls_last
  desc
  desc_nulls_first
  desc_nulls_last
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Pathogen {
  category: String
  name: String
  taxId: Int
}

type PathogenList {
  citations: [String!]
  createdAt: ISO8601DateTime
  id: ID
  name: String
  pathogens: [Pathogen!]
  updatedAt: ISO8601DateTime
  version: String
}

type PersistedBackground {
  background_id: Int
}

type PipelineData {
  stages: [query_PipelineData_stages_items]
  edges: [query_PipelineData_edges_items]
  status: String
}

type PipelineRun {
  adjustedRemainingReads: Int
  alertSent: Boolean!
  alignmentConfig: AlignmentConfig
  alignmentConfigId: Int
  alignmentConfigName: String
  assembled: Int
  compressionRatio: Float
  createdAt: ISO8601DateTime
  dagVars: String
  deprecated: Boolean
  errorMessage: String
  executedAt: ISO8601DateTime
  finalized: Int
  fractionSubsampled: Float
  id: Int!
  jobStatus: String
  knownUserError: String
  maxInputFragments: Int
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineVersion: String
  qcPercent: Float
  resultsFinalized: Int
  s3OutputPrefix: String
  sampleId: Int
  sfnExecutionArn: String
  subsample: Int
  timeToFinalized: Int
  timeToResultsFinalized: Int
  totalErccReads: Int
  totalReads: Int
  truncated: Int
  unmappedReads: Int
  updatedAt: ISO8601DateTime!
  useTaxonWhitelist: Boolean!
  wdlVersion: String
}

type Project {
  backgroundFlag: Int
  createdAt: ISO8601DateTime!
  creator: User
  daysToKeepSamplePrivate: Int!
  description: String
  id: Int!
  maxInputFragmentsDefault: Int
  name: String!
  publicAccess: Int!
  samples: [Sample!]
  subsampleDefault: Int
  totalSampleCount: Int!
  updatedAt: ISO8601DateTime!
}

type Query {
  node(
    """The ID of the object."""
    id: GlobalID!
  ): Node!
  nodes(
    """The IDs of the objects."""
    ids: [GlobalID!]!
  ): [Node!]!
  workflowRuns(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRun!]!
  workflows(where: WorkflowWhereClause = null, orderBy: [WorkflowOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Workflow!]!
  workflowRunSteps(where: WorkflowRunStepWhereClause = null, orderBy: [WorkflowRunStepOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRunStep!]!
  workflowRunEntityInputs(where: WorkflowRunEntityInputWhereClause = null, orderBy: [WorkflowRunEntityInputOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowRunEntityInput!]!
  workflowVersions(where: WorkflowVersionWhereClause = null, orderBy: [WorkflowVersionOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [WorkflowVersion!]!
  workflowRunsAggregate(where: WorkflowRunWhereClause = null): WorkflowRunAggregate!
  workflowsAggregate(where: WorkflowWhereClause = null): WorkflowAggregate!
  workflowRunStepsAggregate(where: WorkflowRunStepWhereClause = null): WorkflowRunStepAggregate!
  workflowRunEntityInputsAggregate(where: WorkflowRunEntityInputWhereClause = null): WorkflowRunEntityInputAggregate!
  workflowVersionsAggregate(where: WorkflowVersionWhereClause = null): WorkflowVersionAggregate!
  files(where: FileWhereClause = null): [File!]!
  samples(where: SampleWhereClause = null, orderBy: [SampleOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Sample!]!
  sequencingReads(where: SequencingReadWhereClause = null, orderBy: [SequencingReadOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [SequencingRead!]!
  genomicRanges(where: GenomicRangeWhereClause = null, orderBy: [GenomicRangeOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [GenomicRange!]!
  referenceGenomes(where: ReferenceGenomeWhereClause = null, orderBy: [ReferenceGenomeOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [ReferenceGenome!]!
  accessions(where: AccessionWhereClause = null, orderBy: [AccessionOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Accession!]!
  hostOrganisms(where: HostOrganismWhereClause = null, orderBy: [HostOrganismOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [HostOrganism!]!
  metadatas(where: MetadatumWhereClause = null, orderBy: [MetadatumOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Metadatum!]!
  consensusGenomes(where: ConsensusGenomeWhereClause = null, orderBy: [ConsensusGenomeOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [ConsensusGenome!]!
  metricsConsensusGenomes(where: MetricConsensusGenomeWhereClause = null, orderBy: [MetricConsensusGenomeOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [MetricConsensusGenome!]!
  taxa(where: TaxonWhereClause = null, orderBy: [TaxonOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [Taxon!]!
  upstreamDatabases(where: UpstreamDatabaseWhereClause = null, orderBy: [UpstreamDatabaseOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [UpstreamDatabase!]!
  indexFiles(where: IndexFileWhereClause = null, orderBy: [IndexFileOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [IndexFile!]!
  bulkDownloads(where: BulkDownloadWhereClause = null, orderBy: [BulkDownloadOrderByClause!] = [], limitOffset: LimitOffsetClause = null): [BulkDownload!]!
  samplesAggregate(where: SampleWhereClause = null): SampleAggregate!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate!
  genomicRangesAggregate(where: GenomicRangeWhereClause = null): GenomicRangeAggregate!
  referenceGenomesAggregate(where: ReferenceGenomeWhereClause = null): ReferenceGenomeAggregate!
  accessionsAggregate(where: AccessionWhereClause = null): AccessionAggregate!
  hostOrganismsAggregate(where: HostOrganismWhereClause = null): HostOrganismAggregate!
  metadatasAggregate(where: MetadatumWhereClause = null): MetadatumAggregate!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate!
  metricsConsensusGenomesAggregate(where: MetricConsensusGenomeWhereClause = null): MetricConsensusGenomeAggregate!
  taxaAggregate(where: TaxonWhereClause = null): TaxonAggregate!
  upstreamDatabasesAggregate(where: UpstreamDatabaseWhereClause = null): UpstreamDatabaseAggregate!
  indexFilesAggregate(where: IndexFileWhereClause = null): IndexFileAggregate!
  bulkDownloadsAggregate(where: BulkDownloadWhereClause = null): BulkDownloadAggregate!
  appConfig(id: ID!): AppConfig
  pathogenList(version: String): PathogenList!
  project(id: Int!): Project!
  sample(sampleId: Int!): Sample!
  sampleReadsStats(sampleIds: [String!]!): SampleReadsStatsList!
  samplesList(annotations: [Annotation!], basic: Boolean, domain: String, hostIds: [Int!], limit: Int, listAllIds: Boolean, location: String, locationV2: [String!], offset: Int, orderBy: String, orderDir: String, projectId: Int, requestedSampleIds: [Int!], sampleIds: [Int!], searchString: String, taxIds: [Int!], taxLevels: [String!], thresholdFilterInfo: String, time: [String!], tissue: [String!], visibility: [String!], workflow: String): SampleList!
  user(archetypes: String!, email: String!, institution: String!, name: String!, role: Int!, segments: String!): User!
  AmrDeprecatedResults(sampleId: String): AmrDeprecatedResults
  AmrWorkflowResults(workflowRunId: String): AmrWorkflowResults
  Background(snapshotLinkId: String): Background
  fedBulkDownloads(input: queryInput_fedBulkDownloads_input_Input): [query_fedBulkDownloads_items]
  BulkDownloadCGOverview(input: queryInput_BulkDownloadCGOverview_input_Input): ConsensusGenomeOverviewRows
  fedConsensusGenomes(input: queryInput_fedConsensusGenomes_input_Input): [query_fedConsensusGenomes_items]
  ConsensusGenomeWorkflowResults(workflowRunId: String): ConsensusGenomeWorkflowResults
  CoverageVizSummary(snapshotLinkId: String, sampleId: String): [query_CoverageVizSummary_items]
  MetadataFields(snapshotLinkId: String, input: queryInput_MetadataFields_input_Input): [query_MetadataFields_items]
  SampleMetadata(snapshotLinkId: String, sampleId: String, input: queryInput_SampleMetadata_input_Input): SampleMetadata
  MngsWorkflowResults(snapshotLinkId: String, sampleId: String, workflowVersionId: String, _backgroundId: String): MngsWorkflowResults
  Pathogens(snapshotLinkId: String, sampleId: String, workflowVersionId: String): [query_Pathogens_items]
  PersistedBackground(projectId: String): PersistedBackground
  PipelineData(sampleId: String, workflowVersionId: String): PipelineData
  fedSamples(input: queryInput_fedSamples_input_Input): [query_fedSamples_items]
  fedSequencingReads(input: queryInput_fedSequencingReads_input_Input): [query_fedSequencingReads_items]
  Taxons(snapshotLinkId: String, sampleId: String, workflowVersionId: String): [query_Taxons_items]
  TaxonDist(backgroundId: String, taxonId: String): TaxonDist
  UserBlastAnnotations(sampleId: String, workflowVersionId: String): [query_UserBlastAnnotations_items]
  ValidateUserCanDeleteObjects(input: queryInput_ValidateUserCanDeleteObjects_input_Input): ValidateUserCanDeleteObjects
  fedWorkflowRuns(input: queryInput_fedWorkflowRuns_input_Input): [query_fedWorkflowRuns_items]
  fedWorkflowRunsAggregate(input: queryInput_fedWorkflowRunsAggregate_input_Input): [query_fedWorkflowRunsAggregate_items]
  ZipLink(workflowRunId: String): ZipLink
  GraphQLFederationVersion: GraphQLFederationVersion
}

type query_AmrWorkflowResults_amr_hit_items {
  drug_class: String
  gene: String
  gene_id: String
  gene_family: String
  high_level_drug_class: String
  mechanism: String
  model: String
  contigs: String
  cutoff: String
  contig_coverage_breadth: String
  contig_percent_id: String
  reads: String
  rpm: Float
  read_coverage_breadth: String
  read_coverage_depth: String
  dpm: Float
  read_species: String
  contig_species: String
  aro_accession: String
}

type query_AmrWorkflowResults_metric_amr {
  total_reads: Int
  qc_percent: Float
  adjusted_remaining_reads: Int
  compression_ratio: Float
  total_ercc_reads: Int
  fraction_subsampled: Float
  insert_size_mean: Int
  insert_size_standard_deviation: Float
  percent_remaining: Float
}

type query_Background_other_backgrounds_items {
  id: Int
  name: String
  created_at: String
  updated_at: String
  description: String
  public_access: Int
  ready: Int
  user_id: Int
  mass_normalized: Boolean
}

type query_ConsensusGenomeWorkflowResults_metric_consensus_genome {
  ercc_mapped_reads: Int
  mapped_reads: Int
  n_actg: Int
  n_ambiguous: Int
  n_missing: Int
  ref_snps: Int
  total_reads: Int
  percent_identity: Float
  gc_percent: Float
  percent_genome_called: Float
  reference_genome_length: Int
  coverage_viz: query_ConsensusGenomeWorkflowResults_metric_consensus_genome_coverage_viz
}

type query_ConsensusGenomeWorkflowResults_metric_consensus_genome_coverage_viz {
  total_length: Int
  coverage: [[Float]]
  coverage_bin_size: Float
  max_aligned_length: Int
  coverage_depth: Float
  coverage_breadth: Float
}

type query_ConsensusGenomeWorkflowResults_reference_genome {
  accession_id: String
  accession_name: String
  taxon: query_ConsensusGenomeWorkflowResults_reference_genome_taxon
}

type query_ConsensusGenomeWorkflowResults_reference_genome_taxon {
  id: String
  name: String
}

type query_CoverageVizSummary_items {
  id: Int
  pipeline_id: Int
  name: String
  num_contigs: Int
  num_reads: Int
  score: Int
  coverage_breadth: JSON
  coverage_depth: JSON
}

type query_fedBulkDownloads_items {
  id: String
  status: String
  startedAt: String
  rawInputsJson: query_fedBulkDownloads_items_rawInputsJson
  ownerUserId: String
  file: query_fedBulkDownloads_items_file
  sampleNames: [JSON]
  analysisCount: Int
  entityInputFileType: String
  entityInputs: [query_fedBulkDownloads_items_entityInputs_items]
  toDelete: query_fedBulkDownloads_items_toDelete
}

type query_fedBulkDownloads_items_entityInputs_items {
  id: String
  name: String
}

type query_fedBulkDownloads_items_file {
  size: Int
  downloadLink: query_fedBulkDownloads_items_file_downloadLink
}

type query_fedBulkDownloads_items_file_downloadLink {
  url: String
}

type query_fedBulkDownloads_items_rawInputsJson {
  description: String
  downloadType: String
  downloadDisplayName: String
  fileFormat: String
}

type query_fedBulkDownloads_items_toDelete {
  user_name: String
  log_url: String
  totalSamples: Int
  progress: JSON
}

type query_fedConsensusGenomes_items {
  producingRunId: String
  taxon: query_fedConsensusGenomes_items_taxon
  referenceGenome: query_fedConsensusGenomes_items_referenceGenome
  accession: query_fedConsensusGenomes_items_accession
  metrics: query_fedConsensusGenomes_items_metrics
  sequencingRead: query_fedConsensusGenomes_items_sequencingRead
}

type query_fedConsensusGenomes_items_accession {
  accessionId: String
  accessionName: String
}

type query_fedConsensusGenomes_items_metrics {
  coverageDepth: Float
  coverageBreadth: Float
  coverageTotalLength: Float
  coverageViz: [[Float]]
  coverageBinSize: Float
  totalReads: Int
  gcPercent: Float
  refSnps: Int
  percentIdentity: Float
  nActg: Int
  percentGenomeCalled: Float
  nMissing: Int
  nAmbiguous: Int
  referenceGenomeLength: Float
  mappedReads: Int
}

type query_fedConsensusGenomes_items_referenceGenome {
  accessionId: String
  accessionName: String
}

type query_fedConsensusGenomes_items_sequencingRead {
  nucleicAcid: String!
  protocol: String
  medakaModel: String
  technology: String!
  taxon: query_fedConsensusGenomes_items_sequencingRead_taxon
  sample: query_fedConsensusGenomes_items_sequencingRead_sample
}

type query_fedConsensusGenomes_items_sequencingRead_sample {
  railsSampleId: Int
  name: String!
  notes: String
  collectionLocation: String!
  sampleType: String!
  waterControl: Boolean
  uploadError: String
  hostOrganism: query_fedConsensusGenomes_items_sequencingRead_sample_hostOrganism
  collection: query_fedConsensusGenomes_items_sequencingRead_sample_collection
  ownerUserId: Float
  ownerUserName: String
  metadatas: query_fedConsensusGenomes_items_sequencingRead_sample_metadatas!
}

type query_fedConsensusGenomes_items_sequencingRead_sample_collection {
  name: String
  public: Boolean
}

type query_fedConsensusGenomes_items_sequencingRead_sample_hostOrganism {
  name: String
}

type query_fedConsensusGenomes_items_sequencingRead_sample_metadatas {
  edges: [query_fedConsensusGenomes_items_sequencingRead_sample_metadatas_edges_items]!
}

type query_fedConsensusGenomes_items_sequencingRead_sample_metadatas_edges_items {
  node: query_fedConsensusGenomes_items_sequencingRead_sample_metadatas_edges_items_node!
}

type query_fedConsensusGenomes_items_sequencingRead_sample_metadatas_edges_items_node {
  fieldName: String!
  value: String!
}

type query_fedConsensusGenomes_items_sequencingRead_taxon {
  name: String!
}

type query_fedConsensusGenomes_items_taxon {
  name: String!
  id: String
  commonName: String
}

type query_fedSamples_items {
  id: String!
  railsSampleId: Int
}

type query_fedSequencingReads_items {
  id: String!
  nucleicAcid: String!
  protocol: String
  medakaModel: String
  technology: String!
  taxon: query_fedSequencingReads_items_taxon
  sample: query_fedSequencingReads_items_sample
  consensusGenomes: query_fedSequencingReads_items_consensusGenomes!
}

type query_fedSequencingReads_items_consensusGenomes {
  edges: [query_fedSequencingReads_items_consensusGenomes_edges_items]!
}

type query_fedSequencingReads_items_consensusGenomes_edges_items {
  node: query_fedSequencingReads_items_consensusGenomes_edges_items_node!
}

type query_fedSequencingReads_items_consensusGenomes_edges_items_node {
  producingRunId: String
  taxon: query_fedSequencingReads_items_consensusGenomes_edges_items_node_taxon
  referenceGenome: query_fedSequencingReads_items_consensusGenomes_edges_items_node_referenceGenome
  metrics: query_fedSequencingReads_items_consensusGenomes_edges_items_node_metrics
}

type query_fedSequencingReads_items_consensusGenomes_edges_items_node_metrics {
  coverageDepth: Float
  totalReads: Int
  gcPercent: Float
  refSnps: Int
  percentIdentity: Float
  nActg: Int
  percentGenomeCalled: Float
  nMissing: Int
  nAmbiguous: Int
  referenceGenomeLength: Float
}

type query_fedSequencingReads_items_consensusGenomes_edges_items_node_referenceGenome {
  accessionId: String
  accessionName: String
}

type query_fedSequencingReads_items_consensusGenomes_edges_items_node_taxon {
  name: String!
}

type query_fedSequencingReads_items_sample {
  railsSampleId: Int
  name: String!
  notes: String
  collectionLocation: String!
  sampleType: String!
  waterControl: Boolean
  uploadError: String
  hostOrganism: query_fedSequencingReads_items_sample_hostOrganism
  collection: query_fedSequencingReads_items_sample_collection
  ownerUserId: Float
  ownerUserName: String
  metadatas: query_fedSequencingReads_items_sample_metadatas!
}

type query_fedSequencingReads_items_sample_collection {
  name: String
  public: Boolean
}

type query_fedSequencingReads_items_sample_hostOrganism {
  name: String!
}

type query_fedSequencingReads_items_sample_metadatas {
  edges: [query_fedSequencingReads_items_sample_metadatas_edges_items]!
}

type query_fedSequencingReads_items_sample_metadatas_edges_items {
  node: query_fedSequencingReads_items_sample_metadatas_edges_items_node!
}

type query_fedSequencingReads_items_sample_metadatas_edges_items_node {
  fieldName: String!
  value: String!
}

type query_fedSequencingReads_items_taxon {
  name: String!
}

type query_fedWorkflowRuns_items {
  id: String!
  ownerUserId: Int!
  startedAt: String
  status: String
  workflowVersion: query_fedWorkflowRuns_items_workflowVersion
  entityInputs: query_fedWorkflowRuns_items_entityInputs!
}

type query_fedWorkflowRuns_items_entityInputs {
  edges: [query_fedWorkflowRuns_items_entityInputs_edges_items]!
}

type query_fedWorkflowRuns_items_entityInputs_edges_items {
  node: query_fedWorkflowRuns_items_entityInputs_edges_items_node!
}

type query_fedWorkflowRuns_items_entityInputs_edges_items_node {
  inputEntityId: String
  entityType: String
}

type query_fedWorkflowRuns_items_workflowVersion {
  version: String
  workflow: query_fedWorkflowRuns_items_workflowVersion_workflow
}

type query_fedWorkflowRuns_items_workflowVersion_workflow {
  name: String
}

type query_fedWorkflowRunsAggregate_items {
  collectionId: String!
  mngsRunsCount: Int!
  cgRunsCount: Int!
  amrRunsCount: Int!
}

type query_MetadataFields_items {
  key: String
  dataType: String
  name: String
  options: JSON
  group: String
  host_genome_ids: [Int]
  description: String
  is_required: Int
  examples: query_MetadataFields_items_examples
  default_for_new_host_genome: Int
  isBoolean: Boolean
}

type query_MetadataFields_items_examples {
  all: [String]
}

type query_MngsWorkflowResults_fed_lineage_items {
  tax_id: String
  name: String
  rank: String
}

type query_MngsWorkflowResults_metric_mngs {
  assembled: Int
  adjusted_remaining_reads: Int
  total_ercc_reads: Int
  num_reads: Int
  num_reads_after_subsampling: Int
  fed_has_byteranges: Boolean
}

type query_MngsWorkflowResults_taxon_hit_results {
  taxon_hits: [query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items]
}

type query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items {
  count_type: String
  count: Int
  base_count: Int
  rpm: Float
  bpm: Float
  alignment_length: Float
  percent_identity: Int
  e_value: Float
  tax_id: Int
  fed_bg_mean: Float
  fed_bg_stdev: Float
  fed_bg_mean_mass_normalized: Float
  fed_bg_stdev_mass_normalized: Float
  fed_z_score: Float
  fed_max_z_score: Float
  fed_agg_score: Float
}

type query_Pathogens_items {
  tax_id: JSON
}

type query_PipelineData_edges_items {
  to: query_PipelineData_edges_items_to
  from: query_PipelineData_edges_items_from
  files: [query_PipelineData_edges_items_files_items]
  isIntraStage: Boolean
}

type query_PipelineData_edges_items_files_items {
  displayName: String
  url: JSON
}

type query_PipelineData_edges_items_from {
  stageIndex: Int
  stepIndex: Int
}

type query_PipelineData_edges_items_to {
  stageIndex: Int
  stepIndex: Int
}

type query_PipelineData_stages_items {
  name: String
  steps: [query_PipelineData_stages_items_steps_items]
  jobStatus: String
}

type query_PipelineData_stages_items_steps_items {
  name: String
  description: String
  inputVariables: [query_PipelineData_stages_items_steps_items_inputVariables_items]
  outputFiles: [query_PipelineData_stages_items_steps_items_outputFiles_items]
  inputEdges: [Int]
  outputEdges: [Int]
  status: String
  startTime: JSON
  endTime: JSON
  resources: [JSON]
}

type query_PipelineData_stages_items_steps_items_inputVariables_items {
  name: String
  type: String
}

type query_PipelineData_stages_items_steps_items_outputFiles_items {
  displayName: String
  url: JSON
}

type query_SampleMetadata_additional_info {
  name: String
  editable: Boolean
  host_genome_name: String
  host_genome_taxa_category: String
  upload_date: String
  project_name: String
  project_id: Int
  notes: String
  ercc_comparison: [query_SampleMetadata_additional_info_ercc_comparison_items]
  pipeline_run: query_SampleMetadata_additional_info_pipeline_run
  summary_stats: query_SampleMetadata_additional_info_summary_stats
}

type query_SampleMetadata_additional_info_ercc_comparison_items {
  name: String
  actual: Int
  expected: JSON
}

type query_SampleMetadata_additional_info_pipeline_run {
  id: String
  sample_id: Int
  created_at: String
  updated_at: String
  job_status: String
  finalized: Int
  total_reads: Int
  adjusted_remaining_reads: Int
  unmapped_reads: Int
  subsample: Int
  pipeline_branch: String
  total_ercc_reads: Int
  fraction_subsampled: Float
  pipeline_version: String
  pipeline_commit: String
  truncated: JSON
  results_finalized: Int
  alignment_config_id: Int
  alert_sent: Int
  dag_vars: JSON
  assembled: Int
  max_input_fragments: Int
  error_message: JSON
  known_user_error: JSON
  pipeline_execution_strategy: String
  sfn_execution_arn: String
  use_taxon_whitelist: Boolean
  wdl_version: String
  s3_output_prefix: String
  executed_at: String
  time_to_finalized: Int
  time_to_results_finalized: Int
  qc_percent: Float
  compression_ratio: Float
  deprecated: Boolean
  technology: String
  guppy_basecaller_setting: JSON
  total_bases: JSON
  unmapped_bases: JSON
  fraction_subsampled_bases: JSON
  truncated_bases: JSON
  deleted_at: JSON
  mapped_reads: JSON
  version: query_SampleMetadata_additional_info_pipeline_run_version
  host_subtracted: String
}

type query_SampleMetadata_additional_info_pipeline_run_version {
  pipeline: String
  alignment_db: String
}

type query_SampleMetadata_additional_info_summary_stats {
  adjusted_remaining_reads: Int
  compression_ratio: Float
  qc_percent: Float
  percent_remaining: Float
  unmapped_reads: Int
  insert_size_mean: JSON
  insert_size_standard_deviation: JSON
  last_processed_at: String
  reads_after_bowtie2_ercc_filtered: JSON
  reads_after_fastp: Int
  reads_after_bowtie2_host_filtered: Int
  reads_after_hisat2_host_filtered: Int
  reads_after_czid_dedup: Int
}

type query_SampleMetadata_metadata_items {
  id: String
  key: String
  raw_value: String
  string_validated_value: String
  number_validated_value: String
  sample_id: Int
  created_at: String
  updated_at: String
  date_validated_value: String
  location_validated_value: query_SampleMetadata_metadata_items_location_validated_value
  metadata_field_id: Int
  location_id: Int
  base_type: String
}

union query_SampleMetadata_metadata_items_location_validated_value = query_SampleMetadata_metadata_items_location_validated_value_oneOf_0 | query_SampleMetadata_metadata_items_location_validated_value_oneOf_1

type query_SampleMetadata_metadata_items_location_validated_value_oneOf_0 {
  name: String
}

type query_SampleMetadata_metadata_items_location_validated_value_oneOf_1 {
  id: String
  name: String
  geo_level: String
  country_name: String
  country_code: String
  state_name: String
  subdivision_name: String
  city_name: String
  osm_id: Int
  locationiq_id: JSON
  lat: JSON
  lng: JSON
  created_at: String
  updated_at: String
  osm_type: String
  country_id: Int
  state_id: Int
  subdivision_id: Int
  city_id: String
  raw_value: String
  title: String
  description: String
  key: String
  refetch_adjusted_location: Boolean
}

input query_SampleMetadata_metadata_items_location_validated_value_oneOf_1_Input {
  id: String
  name: String
  geo_level: String
  country_name: String
  country_code: String
  state_name: String
  subdivision_name: String
  city_name: String
  osm_id: Int
  locationiq_id: JSON
  lat: JSON
  lng: JSON
  created_at: String
  updated_at: String
  osm_type: String
  country_id: Int
  state_id: Int
  subdivision_id: Int
  city_id: String
  raw_value: String
  title: String
  description: String
  key: String
  refetch_adjusted_location: Boolean
}

type query_TaxonDist_merged_NT_NR {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_TaxonDist_NR {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_TaxonDist_NT {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_Taxons_items {
  tax_id: JSON
  tax_id_genus: JSON
  common_name: JSON
  name: JSON
  is_phage: JSON
  level: JSON
  fed_category: JSON
}

type query_UserBlastAnnotations_items {
  tax_id: JSON
  annotation: JSON
}

input queryInput_BulkDownloadCGOverview_input_Input {
  downloadType: String!
  workflowRunIds: [Int]
  workflowRunIdsStrings: [String]
  workflow: String!
  includeMetadata: Boolean!
  authenticityToken: String!
}

input queryInput_fedBulkDownloads_input_Input {
  searchBy: String
  limit: Int
}

input queryInput_fedConsensusGenomes_input_Input {
  limit: Int
  offset: Int
  where: queryInput_fedConsensusGenomes_input_where_Input
  orderBy: queryInput_fedConsensusGenomes_input_orderBy_Input
  todoRemove: queryInput_fedConsensusGenomes_input_todoRemove_Input
}

input queryInput_fedConsensusGenomes_input_orderBy_accession_Input {
  accessionId: String
}

input queryInput_fedConsensusGenomes_input_orderBy_Input {
  accession: queryInput_fedConsensusGenomes_input_orderBy_accession_Input
  metrics: queryInput_fedConsensusGenomes_input_orderBy_metrics_Input
}

input queryInput_fedConsensusGenomes_input_orderBy_metrics_Input {
  coverageDepth: String
  totalReads: String
  gcPercent: String
  refSnps: String
  percentIdentity: String
  nActg: String
  percentGenomeCalled: String
  nMissing: String
  nAmbiguous: String
  referenceGenomeLength: String
}

input queryInput_fedConsensusGenomes_input_todoRemove_Input {
  domain: String
  workflow: String
  projectId: String
  visibility: String
  search: String
  time: [String]
  host: [Int]
  taxaLevels: [String]
  taxons: [Int]
  locationV2: [String]
  tissue: [String]
  orderBy: String
  orderDir: String
}

input queryInput_fedConsensusGenomes_input_where_Input {
  producingRunId: queryInput_fedConsensusGenomes_input_where_producingRunId_Input
}

input queryInput_fedConsensusGenomes_input_where_producingRunId_Input {
  _in: [String]
  _eq: String
}

input queryInput_fedSamples_input_Input {
  where: queryInput_fedSamples_input_where_Input
  orderBy: queryInput_fedSamples_input_orderBy_Input
  sequencingReadsInput: queryInput_fedSamples_input_sequencingReadsInput_Input
  todoRemove: queryInput_fedSamples_input_todoRemove_Input
}

input queryInput_fedSamples_input_orderBy_Input {
  key: String
  dir: String
}

input queryInput_fedSamples_input_sequencingReadsInput_Input {
  where: queryInput_fedSamples_input_sequencingReadsInput_where_Input
}

input queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_Input {
  taxon: queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_taxon_Input
}

input queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_taxon_Input {
  name: queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_taxon_name_Input
}

input queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_taxon_name_Input {
  _in: [String]
}

input queryInput_fedSamples_input_sequencingReadsInput_where_Input {
  taxon: queryInput_fedSamples_input_sequencingReadsInput_where_taxon_Input
  consensusGenomes: queryInput_fedSamples_input_sequencingReadsInput_where_consensusGenomes_Input
}

input queryInput_fedSamples_input_sequencingReadsInput_where_taxon_Input {
  name: queryInput_fedSamples_input_sequencingReadsInput_where_taxon_name_Input
}

input queryInput_fedSamples_input_sequencingReadsInput_where_taxon_name_Input {
  _in: [String]
}

input queryInput_fedSamples_input_todoRemove_Input {
  domain: String
  visibility: String
  time: [String]
  taxaLevels: [String]
  taxons: [Int]
  offset: Int
  limit: Int
  workflow: String
  projectId: String
  listAllIds: Boolean
}

input queryInput_fedSamples_input_where_collectionLocation_Input {
  _in: [String]
}

input queryInput_fedSamples_input_where_hostOrganism_Input {
  name: queryInput_fedSamples_input_where_hostOrganism_name_Input
}

input queryInput_fedSamples_input_where_hostOrganism_name_Input {
  _in: [String]
}

input queryInput_fedSamples_input_where_id_Input {
  _in: [String]
}

input queryInput_fedSamples_input_where_Input {
  id: queryInput_fedSamples_input_where_id_Input
  name: queryInput_fedSamples_input_where_name_Input
  collectionLocation: queryInput_fedSamples_input_where_collectionLocation_Input
  sampleType: queryInput_fedSamples_input_where_sampleType_Input
  hostOrganism: queryInput_fedSamples_input_where_hostOrganism_Input
  sequencingReads: queryInput_fedSamples_input_where_sequencingReads_Input
}

input queryInput_fedSamples_input_where_name_Input {
  _like: String
}

input queryInput_fedSamples_input_where_sampleType_Input {
  _in: [String]
}

input queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_Input {
  taxon: queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_taxon_Input
}

input queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_taxon_Input {
  name: queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_taxon_name_Input
}

input queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_taxon_name_Input {
  _in: [String]
}

input queryInput_fedSamples_input_where_sequencingReads_Input {
  taxon: queryInput_fedSamples_input_where_sequencingReads_taxon_Input
  consensusGenomes: queryInput_fedSamples_input_where_sequencingReads_consensusGenomes_Input
}

input queryInput_fedSamples_input_where_sequencingReads_taxon_Input {
  name: queryInput_fedSamples_input_where_sequencingReads_taxon_name_Input
}

input queryInput_fedSamples_input_where_sequencingReads_taxon_name_Input {
  _in: [String]
}

input queryInput_fedSequencingReads_input_consensusGenomesInput_Input {
  where: queryInput_fedSequencingReads_input_consensusGenomesInput_where_Input
}

input queryInput_fedSequencingReads_input_consensusGenomesInput_where_Input {
  producingRunId: queryInput_fedSequencingReads_input_consensusGenomesInput_where_producingRunId_Input
}

input queryInput_fedSequencingReads_input_consensusGenomesInput_where_producingRunId_Input {
  _in: [String]
}

input queryInput_fedSequencingReads_input_Input {
  limit: Int
  offset: Int
  where: queryInput_fedSequencingReads_input_where_Input
  orderBy: queryInput_fedSequencingReads_input_orderBy_Input
  consensusGenomesInput: queryInput_fedSequencingReads_input_consensusGenomesInput_Input
  todoRemove: queryInput_fedSequencingReads_input_todoRemove_Input
}

input queryInput_fedSequencingReads_input_orderBy_Input {
  protocol: String
  technology: String
  medakaModel: String
  nucleicAcid: String
  sample: queryInput_fedSequencingReads_input_orderBy_sample_Input
}

input queryInput_fedSequencingReads_input_orderBy_sample_hostOrganism_Input {
  name: String
}

input queryInput_fedSequencingReads_input_orderBy_sample_Input {
  name: String
  notes: String
  sampleType: String
  waterControl: String
  collectionLocation: String
  hostOrganism: queryInput_fedSequencingReads_input_orderBy_sample_hostOrganism_Input
  metadata: queryInput_fedSequencingReads_input_orderBy_sample_metadata_Input
}

input queryInput_fedSequencingReads_input_orderBy_sample_metadata_Input {
  fieldName: String
  dir: String
}

input queryInput_fedSequencingReads_input_todoRemove_Input {
  domain: String
  workflow: String
  projectId: String
  visibility: String
  search: String
  time: [String]
  host: [Int]
  taxaLevels: [String]
  taxons: [Int]
  locationV2: [String]
  tissue: [String]
  orderBy: String
  orderDir: String
}

input queryInput_fedSequencingReads_input_where_id_Input {
  _in: [String]
}

input queryInput_fedSequencingReads_input_where_Input {
  id: queryInput_fedSequencingReads_input_where_id_Input
}

input queryInput_fedWorkflowRuns_input_entityInputsInput_Input {
  where: queryInput_fedWorkflowRuns_input_entityInputsInput_where_Input
}

input queryInput_fedWorkflowRuns_input_entityInputsInput_where_fieldName_Input {
  _eq: String
}

input queryInput_fedWorkflowRuns_input_entityInputsInput_where_Input {
  fieldName: queryInput_fedWorkflowRuns_input_entityInputsInput_where_fieldName_Input
}

input queryInput_fedWorkflowRuns_input_Input {
  todoRemove: queryInput_fedWorkflowRuns_input_todoRemove_Input
  orderBy: queryInput_fedWorkflowRuns_input_orderBy_Input
  where: queryInput_fedWorkflowRuns_input_where_Input
  entityInputsInput: queryInput_fedWorkflowRuns_input_entityInputsInput_Input
}

input queryInput_fedWorkflowRuns_input_orderBy_Input {
  startedAt: String
  workflowVersion: queryInput_fedWorkflowRuns_input_orderBy_workflowVersion_Input
}

input queryInput_fedWorkflowRuns_input_orderBy_workflowVersion_Input {
  version: String
  workflow: queryInput_fedWorkflowRuns_input_orderBy_workflowVersion_workflow_Input
}

input queryInput_fedWorkflowRuns_input_orderBy_workflowVersion_workflow_Input {
  name: String
}

input queryInput_fedWorkflowRuns_input_todoRemove_Input {
  domain: String
  projectId: String
  search: String
  host: [Int]
  locationV2: [String]
  taxon: [Int]
  taxonLevels: [String]
  time: [String]
  tissue: [String]
  visibility: String
  workflow: String
  orderBy: String
  orderDir: String
  authenticityToken: String
}

input queryInput_fedWorkflowRuns_input_where_collectionId_Input {
  _in: [Int]
}

input queryInput_fedWorkflowRuns_input_where_id_Input {
  _in: [String]
}

input queryInput_fedWorkflowRuns_input_where_Input {
  id: queryInput_fedWorkflowRuns_input_where_id_Input
  ownerUserId: queryInput_fedWorkflowRuns_input_where_ownerUserId_Input
  startedAt: queryInput_fedWorkflowRuns_input_where_startedAt_Input
  collectionId: queryInput_fedWorkflowRuns_input_where_collectionId_Input
  workflowVersion: queryInput_fedWorkflowRuns_input_where_workflowVersion_Input
}

input queryInput_fedWorkflowRuns_input_where_ownerUserId_Input {
  _eq: Int
}

input queryInput_fedWorkflowRuns_input_where_startedAt_Input {
  _gte: String
}

input queryInput_fedWorkflowRuns_input_where_workflowVersion_Input {
  workflow: queryInput_fedWorkflowRuns_input_where_workflowVersion_workflow_Input
}

input queryInput_fedWorkflowRuns_input_where_workflowVersion_workflow_Input {
  name: queryInput_fedWorkflowRuns_input_where_workflowVersion_workflow_name_Input
}

input queryInput_fedWorkflowRuns_input_where_workflowVersion_workflow_name_Input {
  _in: [String]
}

input queryInput_fedWorkflowRunsAggregate_input_Input {
  where: queryInput_fedWorkflowRunsAggregate_input_where_Input
  todoRemove: queryInput_fedWorkflowRunsAggregate_input_todoRemove_Input
}

input queryInput_fedWorkflowRunsAggregate_input_todoRemove_annotations_items_Input {
  name: String
}

input queryInput_fedWorkflowRunsAggregate_input_todoRemove_Input {
  projectId: String
  domain: String
  host: [Int]
  locationV2: [String]
  taxonThresholds: [queryInput_fedWorkflowRunsAggregate_input_todoRemove_taxonThresholds_items_Input]
  annotations: [queryInput_fedWorkflowRunsAggregate_input_todoRemove_annotations_items_Input]
  tissue: [String]
  visibility: String
  time: [String]
  taxaLevels: [String]
  taxon: [Int]
  search: String
}

input queryInput_fedWorkflowRunsAggregate_input_todoRemove_taxonThresholds_items_Input {
  metric: String
  count_type: String
  operator: String
  value: String
}

input queryInput_fedWorkflowRunsAggregate_input_where_id_Input {
  _in: [String]
}

input queryInput_fedWorkflowRunsAggregate_input_where_Input {
  id: queryInput_fedWorkflowRunsAggregate_input_where_id_Input
}

input queryInput_MetadataFields_input_Input {
  sampleIds: [String]!
  authenticityToken: String!
}

input queryInput_SampleMetadata_input_Input {
  pipelineVersion: String
}

input queryInput_ValidateUserCanDeleteObjects_input_Input {
  selectedIds: [Int]
  workflow: String
  authenticityToken: String
}

type ReferenceGenome implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  fileId: ID
  file(where: FileWhereClause = null): File
  name: String!
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null
    orderBy: [ConsensusGenomeOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type ReferenceGenomeAggregate {
  aggregate: [ReferenceGenomeAggregateFunctions!]
}

type ReferenceGenomeAggregateFunctions {
  sum: ReferenceGenomeNumericalColumns
  avg: ReferenceGenomeNumericalColumns
  stddev: ReferenceGenomeNumericalColumns
  variance: ReferenceGenomeNumericalColumns
  min: ReferenceGenomeMinMaxColumns
  max: ReferenceGenomeMinMaxColumns
  groupBy: ReferenceGenomeGroupByOptions
  count(distinct: Boolean = false, columns: ReferenceGenomeCountColumns = null): Int
}

enum ReferenceGenomeCountColumns {
  file
  name
  consensusGenomes
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input ReferenceGenomeCreateInput {
  name: String!
  producingRunId: ID = null
  collectionId: Int!
}

type ReferenceGenomeGroupByOptions {
  name: String
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ReferenceGenomeMinMaxColumns {
  name: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ReferenceGenomeNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input ReferenceGenomeOrderByClause {
  name: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input ReferenceGenomeUpdateInput {
  name: String = null
}

input ReferenceGenomeWhereClause {
  name: StrComparators
  consensusGenomes: ConsensusGenomeWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input ReferenceGenomeWhereClauseMutations {
  id: UUIDComparators
}

input RunWorkflowVersionInput {
  collectionId: Int!
  workflowVersionId: ID!
  entityInputs: [EntityInputType!]
  rawInputJson: String
  railsWorkflowRunId: Int = null
}

type Sample implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  railsSampleId: Int
  name: String!
  hostOrganism(where: HostOrganismWhereClause = null, orderBy: [HostOrganismOrderByClause!] = []): HostOrganism
  sequencingReads(
    where: SequencingReadWhereClause = null
    orderBy: [SequencingReadOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
  metadatas(
    where: MetadatumWhereClause = null
    orderBy: [MetadatumOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): MetadatumConnection!
  metadatasAggregate(where: MetadatumWhereClause = null): MetadatumAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: ISO8601DateTime
  updatedAt: ISO8601DateTime
  alignmentConfigName: String
  basespaceAccessToken: String
  dagVars: String
  defaultBackgroundId: Int
  defaultPipelineRunId: Int
  details: SampleDetails!
  doNotProcess: Boolean!
  editable: Boolean
  hostGenome: HostGenome
  hostGenomeId: Int
  initialWorkflow: String!
  maxInputFragments: Int
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineRuns: [PipelineRun!]
  privateUntil: ISO8601DateTime
  project: Project
  projectId: Int
  public: Int!
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleDeletable: Boolean
  sampleNotes: String
  status: String
  subsample: Int
  uploadError: String
  uploadedFromBasespace: Int
  useTaxonWhitelist: Boolean!
  user: User
  userId: Int
  webCommit: String
  workflowRuns: [WorkflowRun!]
}

type SampleAggregate {
  aggregate: [SampleAggregateFunctions!]
}

type SampleAggregateFunctions {
  sum: SampleNumericalColumns
  avg: SampleNumericalColumns
  stddev: SampleNumericalColumns
  variance: SampleNumericalColumns
  min: SampleMinMaxColumns
  max: SampleMinMaxColumns
  groupBy: SampleGroupByOptions
  count(distinct: Boolean = false, columns: SampleCountColumns = null): Int
}

"""A connection to a list of items."""
type SampleConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SampleEdge!]!
}

enum SampleCountColumns {
  railsSampleId
  name
  hostOrganism
  sequencingReads
  metadatas
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input SampleCreateInput {
  railsSampleId: Int = null
  name: String!
  hostOrganismId: ID = null
  producingRunId: ID = null
  collectionId: Int!
}

type SampleDetails {
  dbSample: DbSample
  derivedSampleOutput: DerivedSampleOutput
  metadata: SampleMetadata
  mngsRunInfo: MngsRunInfo
  uploader: SampleUploader!
  workflowRunsCountByWorkflow: String
}

"""An edge in a connection."""
type SampleEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Sample!
}

type SampleGroupByOptions {
  railsSampleId: Int
  name: String
  hostOrganism: HostOrganismGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SampleList {
  sampleIds: [Int!]
  samples: [Sample!]!
}

type SampleMetadata {
  collectionDate: String
  collectionLocationV2: String
  nucleotideType: String
  sampleType: String
  waterControl: String
  metadata: [query_SampleMetadata_metadata_items]
  additional_info: query_SampleMetadata_additional_info
}

type SampleMinMaxColumns {
  railsSampleId: Int
  name: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SampleNumericalColumns {
  railsSampleId: Int
  ownerUserId: Int
  collectionId: Int
}

input SampleOrderByClause {
  railsSampleId: orderBy
  name: orderBy
  hostOrganism: HostOrganismOrderByClause
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

type SampleReadsStats {
  initialReads: Int
  name: String
  pipelineVersion: String
  sampleId: ID!
  steps: [SampleSteps!]
  wdlVersion: String
}

type SampleReadsStatsList {
  sampleReadsStats: [SampleReadsStats!]!
}

type SampleSteps {
  name: String
  readsAfter: Int
}

type SampleSummaryStats {
  adjustedRemainingReads: Int
  compressionRatio: Float
  insertSizeMean: Float
  insertSizeStandardDeviation: Float
  lastProcessedAt: ISO8601DateTime
  percentRemaining: Float
  qcPercent: Float
  readsAfterCzidDedup: Int
  readsAfterPriceseq: Int
  readsAfterStar: Int
  readsAfterTrimmomatic: Int
  unmappedReads: Int
}

input SampleUpdateInput {
  name: String = null
}

type SampleUploader {
  id: Int!
  name: String
}

input SampleWhereClause {
  railsSampleId: IntComparators
  name: StrComparators
  hostOrganism: HostOrganismWhereClause
  sequencingReads: SequencingReadWhereClause
  metadatas: MetadatumWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input SampleWhereClauseMutations {
  id: UUIDComparators
}

enum SequencingProtocol {
  ampliseq
  artic
  artic_v3
  artic_v4
  artic_v5
  combined_msspe_artic
  covidseq
  midnight
  msspe
  snap
  varskip
  easyseq
}

input SequencingProtocolEnumComparators {
  _eq: SequencingProtocol
  _neq: SequencingProtocol
  _in: [SequencingProtocol!]
  _nin: [SequencingProtocol!]
  _gt: SequencingProtocol
  _gte: SequencingProtocol
  _lt: SequencingProtocol
  _lte: SequencingProtocol
  _is_null: SequencingProtocol
}

type SequencingRead implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  sample(where: SampleWhereClause = null, orderBy: [SampleOrderByClause!] = []): Sample
  protocol: SequencingProtocol
  r1FileId: ID
  r1File(where: FileWhereClause = null): File
  r2FileId: ID
  r2File(where: FileWhereClause = null): File
  technology: SequencingTechnology!
  clearlabsExport: Boolean!
  medakaModel: String
  taxon(where: TaxonWhereClause = null, orderBy: [TaxonOrderByClause!] = []): Taxon
  primerFile(where: GenomicRangeWhereClause = null, orderBy: [GenomicRangeOrderByClause!] = []): GenomicRange
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null
    orderBy: [ConsensusGenomeOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type SequencingReadAggregate {
  aggregate: [SequencingReadAggregateFunctions!]
}

type SequencingReadAggregateFunctions {
  sum: SequencingReadNumericalColumns
  avg: SequencingReadNumericalColumns
  stddev: SequencingReadNumericalColumns
  variance: SequencingReadNumericalColumns
  min: SequencingReadMinMaxColumns
  max: SequencingReadMinMaxColumns
  groupBy: SequencingReadGroupByOptions
  count(distinct: Boolean = false, columns: SequencingReadCountColumns = null): Int
}

"""A connection to a list of items."""
type SequencingReadConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [SequencingReadEdge!]!
}

enum SequencingReadCountColumns {
  sample
  protocol
  r1File
  r2File
  technology
  clearlabsExport
  medakaModel
  taxon
  primerFile
  consensusGenomes
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input SequencingReadCreateInput {
  sampleId: ID = null
  protocol: SequencingProtocol = null
  technology: SequencingTechnology!
  clearlabsExport: Boolean!
  medakaModel: String = null
  taxonId: ID = null
  primerFileId: ID = null
  producingRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type SequencingReadEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: SequencingRead!
}

type SequencingReadGroupByOptions {
  sample: SampleGroupByOptions
  protocol: SequencingProtocol
  technology: SequencingTechnology
  clearlabsExport: Boolean
  medakaModel: String
  taxon: TaxonGroupByOptions
  primerFile: GenomicRangeGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SequencingReadMinMaxColumns {
  medakaModel: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SequencingReadNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input SequencingReadOrderByClause {
  sample: SampleOrderByClause
  protocol: orderBy
  technology: orderBy
  clearlabsExport: orderBy
  medakaModel: orderBy
  taxon: TaxonOrderByClause
  primerFile: GenomicRangeOrderByClause
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input SequencingReadUpdateInput {
  clearlabsExport: Boolean = null
  medakaModel: String = null
  primerFileId: ID = null
}

input SequencingReadWhereClause {
  sample: SampleWhereClause
  protocol: SequencingProtocolEnumComparators
  technology: SequencingTechnologyEnumComparators
  clearlabsExport: BoolComparators
  medakaModel: StrComparators
  taxon: TaxonWhereClause
  primerFile: GenomicRangeWhereClause
  consensusGenomes: ConsensusGenomeWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input SequencingReadWhereClauseMutations {
  id: UUIDComparators
}

enum SequencingTechnology {
  Illumina
  Nanopore
}

input SequencingTechnologyEnumComparators {
  _eq: SequencingTechnology
  _neq: SequencingTechnology
  _in: [SequencingTechnology!]
  _nin: [SequencingTechnology!]
  _gt: SequencingTechnology
  _gte: SequencingTechnology
  _lt: SequencingTechnology
  _lte: SequencingTechnology
  _is_null: SequencingTechnology
}

type SignedURL {
  url: String!
  protocol: String!
  method: String!
  expiration: Int!
  fields: JSON
}

input StrComparators {
  _eq: String
  _neq: String
  _in: [String!]
  _nin: [String!]
  _is_null: Int
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _like: String
  _nlike: String
  _ilike: String
  _nilike: String
  _regex: String
  _nregex: String
  _iregex: String
  _niregex: String
}

type Taxon implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  wikipediaId: String
  description: String
  commonName: String
  name: String!
  isPhage: Boolean!
  upstreamDatabase(where: UpstreamDatabaseWhereClause = null, orderBy: [UpstreamDatabaseOrderByClause!] = []): UpstreamDatabase
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
  consensusGenomes(
    where: ConsensusGenomeWhereClause = null
    orderBy: [ConsensusGenomeOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): ConsensusGenomeConnection!
  consensusGenomesAggregate(where: ConsensusGenomeWhereClause = null): ConsensusGenomeAggregate
  sequencingReads(
    where: SequencingReadWhereClause = null
    orderBy: [SequencingReadOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): SequencingReadConnection!
  sequencingReadsAggregate(where: SequencingReadWhereClause = null): SequencingReadAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type TaxonAggregate {
  aggregate: [TaxonAggregateFunctions!]
}

type TaxonAggregateFunctions {
  sum: TaxonNumericalColumns
  avg: TaxonNumericalColumns
  stddev: TaxonNumericalColumns
  variance: TaxonNumericalColumns
  min: TaxonMinMaxColumns
  max: TaxonMinMaxColumns
  groupBy: TaxonGroupByOptions
  count(distinct: Boolean = false, columns: TaxonCountColumns = null): Int
}

"""A connection to a list of items."""
type TaxonConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [TaxonEdge!]!
}

enum TaxonCountColumns {
  wikipediaId
  description
  commonName
  name
  isPhage
  upstreamDatabase
  upstreamDatabaseIdentifier
  level
  taxParent
  taxSpecies
  taxGenus
  taxFamily
  taxOrder
  taxClass
  taxPhylum
  taxKingdom
  taxSuperkingdom
  consensusGenomes
  sequencingReads
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input TaxonCreateInput {
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  name: String!
  isPhage: Boolean!
  upstreamDatabaseId: ID!
  upstreamDatabaseIdentifier: String!
  level: TaxonLevel!
  taxParentId: ID = null
  taxSpeciesId: ID = null
  taxGenusId: ID = null
  taxFamilyId: ID = null
  taxOrderId: ID = null
  taxClassId: ID = null
  taxPhylumId: ID = null
  taxKingdomId: ID = null
  taxSuperkingdomId: ID = null
  producingRunId: ID = null
  collectionId: Int!
}

type TaxonDist {
  merged_NT_NR: query_TaxonDist_merged_NT_NR
  NR: query_TaxonDist_NR
  NT: query_TaxonDist_NT
}

"""An edge in a connection."""
type TaxonEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Taxon!
}

type TaxonGroupByOptions {
  wikipediaId: String
  description: String
  commonName: String
  name: String
  isPhage: Boolean
  upstreamDatabase: UpstreamDatabaseGroupByOptions
  upstreamDatabaseIdentifier: String
  level: TaxonLevel
  taxParent: TaxonGroupByOptions
  taxSpecies: TaxonGroupByOptions
  taxGenus: TaxonGroupByOptions
  taxFamily: TaxonGroupByOptions
  taxOrder: TaxonGroupByOptions
  taxClass: TaxonGroupByOptions
  taxPhylum: TaxonGroupByOptions
  taxKingdom: TaxonGroupByOptions
  taxSuperkingdom: TaxonGroupByOptions
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

enum TaxonLevel {
  level_subspecies
  level_species
  level_genus
  level_family
  level_order
  level_class
  level_phylum
  level_kingdom
  level_superkingdom
}

input TaxonLevelEnumComparators {
  _eq: TaxonLevel
  _neq: TaxonLevel
  _in: [TaxonLevel!]
  _nin: [TaxonLevel!]
  _gt: TaxonLevel
  _gte: TaxonLevel
  _lt: TaxonLevel
  _lte: TaxonLevel
  _is_null: TaxonLevel
}

type TaxonMinMaxColumns {
  wikipediaId: String
  description: String
  commonName: String
  name: String
  upstreamDatabaseIdentifier: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type TaxonNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input TaxonOrderByClause {
  wikipediaId: orderBy
  description: orderBy
  commonName: orderBy
  name: orderBy
  isPhage: orderBy
  upstreamDatabase: UpstreamDatabaseOrderByClause
  upstreamDatabaseIdentifier: orderBy
  level: orderBy
  taxParent: orderBy
  taxSpecies: orderBy
  taxGenus: orderBy
  taxFamily: orderBy
  taxOrder: orderBy
  taxClass: orderBy
  taxPhylum: orderBy
  taxKingdom: orderBy
  taxSuperkingdom: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input TaxonUpdateInput {
  wikipediaId: String = null
  description: String = null
  commonName: String = null
  isPhage: Boolean = null
  level: TaxonLevel = null
  taxParentId: ID = null
  taxSpeciesId: ID = null
  taxGenusId: ID = null
  taxFamilyId: ID = null
  taxOrderId: ID = null
  taxClassId: ID = null
  taxPhylumId: ID = null
  taxKingdomId: ID = null
  taxSuperkingdomId: ID = null
}

input TaxonWhereClause {
  wikipediaId: StrComparators
  description: StrComparators
  commonName: StrComparators
  name: StrComparators
  isPhage: BoolComparators
  upstreamDatabase: UpstreamDatabaseWhereClause
  upstreamDatabaseIdentifier: StrComparators
  level: TaxonLevelEnumComparators
  consensusGenomes: ConsensusGenomeWhereClause
  sequencingReads: SequencingReadWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input TaxonWhereClauseMutations {
  id: UUIDComparators
}

type UpdateMetadataReponse {
  status: String
  message: String
}

type UpdateSampleName {
  status: String
  message: String
}

type UpdateSampleNotes {
  status: String
  message: String
}

type UpstreamDatabase implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  name: String!
  taxa(
    where: TaxonWhereClause = null
    orderBy: [TaxonOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): TaxonConnection!
  taxaAggregate(where: TaxonWhereClause = null): TaxonAggregate
  indexes(
    where: IndexFileWhereClause = null
    orderBy: [IndexFileOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): IndexFileConnection!
  indexesAggregate(where: IndexFileWhereClause = null): IndexFileAggregate
  accessions(
    where: AccessionWhereClause = null
    orderBy: [AccessionOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): AccessionConnection!
  accessionsAggregate(where: AccessionWhereClause = null): AccessionAggregate
  producingRunId: ID
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type UpstreamDatabaseAggregate {
  aggregate: [UpstreamDatabaseAggregateFunctions!]
}

type UpstreamDatabaseAggregateFunctions {
  sum: UpstreamDatabaseNumericalColumns
  avg: UpstreamDatabaseNumericalColumns
  stddev: UpstreamDatabaseNumericalColumns
  variance: UpstreamDatabaseNumericalColumns
  min: UpstreamDatabaseMinMaxColumns
  max: UpstreamDatabaseMinMaxColumns
  groupBy: UpstreamDatabaseGroupByOptions
  count(distinct: Boolean = false, columns: UpstreamDatabaseCountColumns = null): Int
}

enum UpstreamDatabaseCountColumns {
  name
  taxa
  indexes
  accessions
  id
  producingRunId
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input UpstreamDatabaseCreateInput {
  name: String!
  producingRunId: ID = null
  collectionId: Int!
}

type UpstreamDatabaseGroupByOptions {
  name: String
  id: UUID
  producingRunId: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UpstreamDatabaseMinMaxColumns {
  name: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UpstreamDatabaseNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input UpstreamDatabaseOrderByClause {
  name: orderBy
  id: orderBy
  producingRunId: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input UpstreamDatabaseUpdateInput {
  name: String = null
}

input UpstreamDatabaseWhereClause {
  name: StrComparators
  taxa: TaxonWhereClause
  indexes: IndexFileWhereClause
  accessions: AccessionWhereClause
  id: UUIDComparators
  producingRunId: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input UpstreamDatabaseWhereClauseMutations {
  id: UUIDComparators
}

type User {
  archetypes: String!
  createdByUserId: BigInt!
  email: String!
  id: ID!
  institution: String!
  name: String!
  role: Int!
  segments: String!
}

scalar UUID

input UUIDComparators {
  _eq: UUID
  _neq: UUID
  _in: [UUID!]
  _nin: [UUID!]
  _gt: UUID
  _gte: UUID
  _lt: UUID
  _lte: UUID
}

type ValidateUserCanDeleteObjects {
  validIds: [Int]!
  invalidSampleNames: [String]!
  error: String
}

type Workflow implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  versions(
    where: WorkflowVersionWhereClause = null
    orderBy: [WorkflowVersionOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowVersionConnection!
  versionsAggregate(where: WorkflowVersionWhereClause = null): WorkflowVersionAggregate
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkflowAggregate {
  aggregate: [WorkflowAggregateFunctions!]
}

type WorkflowAggregateFunctions {
  sum: WorkflowNumericalColumns
  avg: WorkflowNumericalColumns
  stddev: WorkflowNumericalColumns
  variance: WorkflowNumericalColumns
  min: WorkflowMinMaxColumns
  max: WorkflowMinMaxColumns
  groupBy: WorkflowGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowCountColumns = null): Int
}

enum WorkflowCountColumns {
  name
  defaultVersion
  minimumSupportedVersion
  versions
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input WorkflowCreateInput {
  name: String = null
  defaultVersion: String = null
  minimumSupportedVersion: String = null
  collectionId: Int!
}

type WorkflowGroupByOptions {
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowMinMaxColumns {
  name: String
  defaultVersion: String
  minimumSupportedVersion: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowOrderByClause {
  name: orderBy
  defaultVersion: orderBy
  minimumSupportedVersion: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

type WorkflowRun implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  status: String!
  workflowVersion(where: WorkflowVersionWhereClause = null, orderBy: [WorkflowVersionOrderByClause!] = []): WorkflowVersion
  steps(
    where: WorkflowRunStepWhereClause = null
    orderBy: [WorkflowRunStepOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunStepConnection!
  stepsAggregate(where: WorkflowRunStepWhereClause = null): WorkflowRunStepAggregate
  entityInputs(
    where: WorkflowRunEntityInputWhereClause = null
    orderBy: [WorkflowRunEntityInputOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunEntityInputConnection!
  entityInputsAggregate(where: WorkflowRunEntityInputWhereClause = null): WorkflowRunEntityInputAggregate
  rawInputsJson: String
  ownerUserId: Int!
  collectionId: Int!
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  cachedResults: String
  deprecated: Boolean!
  errorMessage: String
  executedAt: ISO8601DateTime
  inputsJson: String
  rerunFrom: Int
  s3OutputPrefix: String
  sample: Sample
  sampleId: Int
  sfnExecutionArn: String
  timeToFinalized: Int
  wdlVersion: String
  workflow: String!
}

type WorkflowRunAggregate {
  aggregate: [WorkflowRunAggregateFunctions!]
}

type WorkflowRunAggregateFunctions {
  sum: WorkflowRunNumericalColumns
  avg: WorkflowRunNumericalColumns
  stddev: WorkflowRunNumericalColumns
  variance: WorkflowRunNumericalColumns
  min: WorkflowRunMinMaxColumns
  max: WorkflowRunMinMaxColumns
  groupBy: WorkflowRunGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunEdge!]!
}

enum WorkflowRunCountColumns {
  railsWorkflowRunId
  startedAt
  endedAt
  executionId
  outputsJson
  workflowRunnerInputsJson
  status
  workflowVersion
  steps
  entityInputs
  rawInputsJson
  deprecatedBy
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

"""An edge in a connection."""
type WorkflowRunEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRun!
}

type WorkflowRunEntityInput implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  inputEntityId: ID
  fieldName: String
  entityType: String
  workflowRun(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = []): WorkflowRun
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkflowRunEntityInputAggregate {
  aggregate: [WorkflowRunEntityInputAggregateFunctions!]
}

type WorkflowRunEntityInputAggregateFunctions {
  sum: WorkflowRunEntityInputNumericalColumns
  avg: WorkflowRunEntityInputNumericalColumns
  stddev: WorkflowRunEntityInputNumericalColumns
  variance: WorkflowRunEntityInputNumericalColumns
  min: WorkflowRunEntityInputMinMaxColumns
  max: WorkflowRunEntityInputMinMaxColumns
  groupBy: WorkflowRunEntityInputGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunEntityInputCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunEntityInputConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunEntityInputEdge!]!
}

enum WorkflowRunEntityInputCountColumns {
  inputEntityId
  fieldName
  entityType
  workflowRun
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input WorkflowRunEntityInputCreateInput {
  inputEntityId: ID = null
  fieldName: String = null
  entityType: String = null
  workflowRunId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type WorkflowRunEntityInputEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRunEntityInput!
}

type WorkflowRunEntityInputGroupByOptions {
  inputEntityId: UUID
  fieldName: String
  entityType: String
  workflowRun: WorkflowRunGroupByOptions
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunEntityInputMinMaxColumns {
  fieldName: String
  entityType: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunEntityInputNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunEntityInputOrderByClause {
  inputEntityId: orderBy
  fieldName: orderBy
  entityType: orderBy
  workflowRun: WorkflowRunOrderByClause
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input WorkflowRunEntityInputWhereClause {
  inputEntityId: UUIDComparators
  fieldName: StrComparators
  entityType: StrComparators
  workflowRun: WorkflowRunWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input WorkflowRunEntityInputWhereClauseMutations {
  id: UUIDComparators
}

type WorkflowRunGroupByOptions {
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  status: WorkflowRunStatus
  workflowVersion: WorkflowVersionGroupByOptions
  rawInputsJson: String
  deprecatedBy: WorkflowRunGroupByOptions
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunMinMaxColumns {
  railsWorkflowRunId: Int
  startedAt: DateTime
  endedAt: DateTime
  executionId: String
  outputsJson: String
  workflowRunnerInputsJson: String
  rawInputsJson: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunNumericalColumns {
  railsWorkflowRunId: Int
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunOrderByClause {
  railsWorkflowRunId: orderBy
  startedAt: orderBy
  endedAt: orderBy
  executionId: orderBy
  outputsJson: orderBy
  workflowRunnerInputsJson: orderBy
  status: orderBy
  workflowVersion: WorkflowVersionOrderByClause
  rawInputsJson: orderBy
  deprecatedBy: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

enum WorkflowRunStatus {
  SUCCEEDED
  SUCCEEDED_WITH_ISSUE
  TIMED_OUT
  ABORTED
  FAILED
  CREATED
  PENDING
  STARTED
  RUNNING
}

input WorkflowRunStatusEnumComparators {
  _eq: WorkflowRunStatus
  _neq: WorkflowRunStatus
  _in: [WorkflowRunStatus!]
  _nin: [WorkflowRunStatus!]
  _gt: WorkflowRunStatus
  _gte: WorkflowRunStatus
  _lt: WorkflowRunStatus
  _lte: WorkflowRunStatus
  _is_null: WorkflowRunStatus
}

type WorkflowRunStep implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  workflowRun(where: WorkflowRunWhereClause = null, orderBy: [WorkflowRunOrderByClause!] = []): WorkflowRun
  startedAt: DateTime
  endedAt: DateTime
  status: WorkflowRunStepStatus
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkflowRunStepAggregate {
  aggregate: [WorkflowRunStepAggregateFunctions!]
}

type WorkflowRunStepAggregateFunctions {
  sum: WorkflowRunStepNumericalColumns
  avg: WorkflowRunStepNumericalColumns
  stddev: WorkflowRunStepNumericalColumns
  variance: WorkflowRunStepNumericalColumns
  min: WorkflowRunStepMinMaxColumns
  max: WorkflowRunStepMinMaxColumns
  groupBy: WorkflowRunStepGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowRunStepCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowRunStepConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowRunStepEdge!]!
}

enum WorkflowRunStepCountColumns {
  workflowRun
  startedAt
  endedAt
  status
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input WorkflowRunStepCreateInput {
  workflowRunId: ID = null
  endedAt: DateTime = null
  status: WorkflowRunStepStatus = null
  collectionId: Int!
}

"""An edge in a connection."""
type WorkflowRunStepEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowRunStep!
}

type WorkflowRunStepGroupByOptions {
  workflowRun: WorkflowRunGroupByOptions
  startedAt: DateTime
  endedAt: DateTime
  status: WorkflowRunStepStatus
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunStepMinMaxColumns {
  startedAt: DateTime
  endedAt: DateTime
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowRunStepNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowRunStepOrderByClause {
  workflowRun: WorkflowRunOrderByClause
  startedAt: orderBy
  endedAt: orderBy
  status: orderBy
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

enum WorkflowRunStepStatus {
  RUNNING
  SUCCEEDED
  FAILED
}

input WorkflowRunStepStatusEnumComparators {
  _eq: WorkflowRunStepStatus
  _neq: WorkflowRunStepStatus
  _in: [WorkflowRunStepStatus!]
  _nin: [WorkflowRunStepStatus!]
  _gt: WorkflowRunStepStatus
  _gte: WorkflowRunStepStatus
  _lt: WorkflowRunStepStatus
  _lte: WorkflowRunStepStatus
  _is_null: WorkflowRunStepStatus
}

input WorkflowRunStepUpdateInput {
  endedAt: DateTime = null
  status: WorkflowRunStepStatus = null
}

input WorkflowRunStepWhereClause {
  workflowRun: WorkflowRunWhereClause
  startedAt: DatetimeComparators
  endedAt: DatetimeComparators
  status: WorkflowRunStepStatusEnumComparators
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input WorkflowRunStepWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowRunUpdateInput {
  endedAt: DateTime = null
  executionId: String = null
  outputsJson: String = null
  workflowRunnerInputsJson: String = null
  status: WorkflowRunStatus = null
  deprecatedById: ID = null
}

input WorkflowRunWhereClause {
  railsWorkflowRunId: IntComparators
  startedAt: DatetimeComparators
  endedAt: DatetimeComparators
  executionId: StrComparators
  outputsJson: StrComparators
  workflowRunnerInputsJson: StrComparators
  status: WorkflowRunStatusEnumComparators
  workflowVersion: WorkflowVersionWhereClause
  steps: WorkflowRunStepWhereClause
  entityInputs: WorkflowRunEntityInputWhereClause
  rawInputsJson: StrComparators
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input WorkflowRunWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowUpdateInput {
  name: String = null
  defaultVersion: String = null
  minimumSupportedVersion: String = null
}

type WorkflowVersion implements EntityInterface & Node {
  """The Globally Unique ID of this object"""
  _id: GlobalID!
  id: ID!
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  workflow(where: WorkflowWhereClause = null, orderBy: [WorkflowOrderByClause!] = []): Workflow
  runs(
    where: WorkflowRunWhereClause = null
    orderBy: [WorkflowRunOrderByClause!] = []

    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): WorkflowRunConnection!
  runsAggregate(where: WorkflowRunWhereClause = null): WorkflowRunAggregate
  ownerUserId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
}

type WorkflowVersionAggregate {
  aggregate: [WorkflowVersionAggregateFunctions!]
}

type WorkflowVersionAggregateFunctions {
  sum: WorkflowVersionNumericalColumns
  avg: WorkflowVersionNumericalColumns
  stddev: WorkflowVersionNumericalColumns
  variance: WorkflowVersionNumericalColumns
  min: WorkflowVersionMinMaxColumns
  max: WorkflowVersionMinMaxColumns
  groupBy: WorkflowVersionGroupByOptions
  count(distinct: Boolean = false, columns: WorkflowVersionCountColumns = null): Int
}

"""A connection to a list of items."""
type WorkflowVersionConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [WorkflowVersionEdge!]!
}

enum WorkflowVersionCountColumns {
  graphJson
  workflowUri
  version
  manifest
  workflow
  runs
  id
  ownerUserId
  collectionId
  createdAt
  updatedAt
}

input WorkflowVersionCreateInput {
  graphJson: String = null
  workflowUri: String = null
  version: String = null
  manifest: String = null
  workflowId: ID = null
  collectionId: Int!
}

"""An edge in a connection."""
type WorkflowVersionEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: WorkflowVersion!
}

type WorkflowVersionGroupByOptions {
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  workflow: WorkflowGroupByOptions
  id: UUID
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowVersionMinMaxColumns {
  graphJson: String
  workflowUri: String
  version: String
  manifest: String
  ownerUserId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type WorkflowVersionNumericalColumns {
  ownerUserId: Int
  collectionId: Int
}

input WorkflowVersionOrderByClause {
  graphJson: orderBy
  workflowUri: orderBy
  version: orderBy
  manifest: orderBy
  workflow: WorkflowOrderByClause
  id: orderBy
  ownerUserId: orderBy
  collectionId: orderBy
  createdAt: orderBy
  updatedAt: orderBy
}

input WorkflowVersionWhereClause {
  graphJson: StrComparators
  workflowUri: StrComparators
  version: StrComparators
  manifest: StrComparators
  workflow: WorkflowWhereClause
  runs: WorkflowRunWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input WorkflowVersionWhereClauseMutations {
  id: UUIDComparators
}

input WorkflowWhereClause {
  name: StrComparators
  defaultVersion: StrComparators
  minimumSupportedVersion: StrComparators
  versions: WorkflowVersionWhereClause
  id: UUIDComparators
  ownerUserId: IntComparators
  collectionId: IntComparators
  createdAt: DatetimeComparators
  updatedAt: DatetimeComparators
}

input WorkflowWhereClauseMutations {
  id: UUIDComparators
}

type ZipLink {
  url: String
  error: String
}

