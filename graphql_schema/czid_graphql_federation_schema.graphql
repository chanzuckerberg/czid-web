"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

directive @example(value: ObjMap) on FIELD_DEFINITION | OBJECT | INPUT_OBJECT | ENUM | SCALAR

directive @globalOptions(sourceName: String, endpoint: String, operationHeaders: ObjMap, queryStringOptions: ObjMap, queryParams: ObjMap) on OBJECT

directive @httpOperation(path: String, operationSpecificHeaders: ObjMap, httpMethod: HTTPMethod, isBinary: Boolean, requestBaseBody: ObjMap, queryParamArgMap: ObjMap, queryStringOptionsByParam: ObjMap) on FIELD_DEFINITION

type AlignmentConfig {
  createdAt: ISO8601DateTime!
  indexDirSuffix: String
  lineageVersion: String!
  lineageVersionOld: Int
  name: String
  s3Accession2taxidPath: String
  s3DeuterostomeDbPath: String
  s3LineagePath: String
  s3NrDbPath: String
  s3NrLocDbPath: String
  s3NtDbPath: String
  s3NtInfoDbPath: String
  s3NtLocDbPath: String
  s3TaxonBlacklistPath: String
  updatedAt: ISO8601DateTime!
}

type AmrDeprecatedResults {
  id: Int
  gene: String
  allele: String
  coverage: Float
  depth: Float
  pipeline_run_id: Int
  drug_family: String
  created_at: String
  updated_at: String
  annotation_gene: String
  genbank_accession: String
  total_reads: Int
  rpm: Float
  dpm: Float
}

type AmrWorkflowResults {
  quality_metrics: query_AmrWorkflowResults_quality_metrics
  report_table_data: [query_AmrWorkflowResults_report_table_data_items]
}

input Annotation {
  name: String!
}

type AppConfig {
  key: String!
  value: String!
}

type Background {
  other_backgrounds: [query_Background_other_backgrounds_items]
  owned_backgrounds: [JSON]
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

type BulkDownload {
  bulk_download: query_BulkDownload_bulk_download
  download_type: query_BulkDownload_download_type
}

type ConsensusGenomeWorkflowResults {
  metric_consensus_genome: query_ConsensusGenomeWorkflowResults_metric_consensus_genome
  reference_genome: query_ConsensusGenomeWorkflowResults_reference_genome
}

"""Autogenerated return type of CreateUser."""
type CreateUserPayload {
  archetypes: String
  email: String
  institution: String
  name: String
  role: Int
  segments: String
  sendActivation: Boolean
}

type DbSample {
  alignmentConfigName: String
  basespaceAccessToken: String
  clientUpdatedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  dagVars: String
  doNotProcess: Boolean!
  hostGenomeId: Int
  hostGenomeName: String
  id: Int!
  initialWorkflow: String!
  inputFiles: [InputFile!]!
  maxInputFragments: Int
  name: String
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  privateUntil: ISO8601DateTime
  projectId: Int
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleNotes: String
  status: String
  subsample: Int
  updatedAt: ISO8601DateTime!
  uploadError: String
  uploadedFromBasespace: Int!
  useTaxonWhitelist: Boolean!
  userId: Int!
  webCommit: String
}

type DeleteSamples {
  deleted_workflow_ids: [Int]!
  error: String
}

type DerivedSampleOutput {
  hostGenomeName: String!
  pipelineRun: PipelineRun
  projectName: String!
  summaryStats: SampleSummaryStats
}

type GraphQLFederationVersion {
  version: String
  gitCommit: String
}

type HostGenome {
  createdAt: ISO8601DateTime!
  defaultBackgroundId: Int
  id: Int!
  name: String!
  s3Bowtie2IndexPath: String!
  s3Minimap2IndexPath: String
  s3StarIndexPath: String!
  samplesCount: Int!
  skipDeuteroFilter: Int!
  taxaCategory: String!
  updatedAt: ISO8601DateTime!
  user: User
  userId: Int
}

enum HTTPMethod {
  GET
  HEAD
  POST
  PUT
  DELETE
  CONNECT
  OPTIONS
  TRACE
  PATCH
}

type InputFile {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String
  parts: String
  presignedUrl: String
  sampleId: Int!
  source: String
  sourceType: String
  updatedAt: ISO8601DateTime
  uploadClient: String
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type MngsRunInfo {
  createdAt: ISO8601DateTime
  finalized: Int
  reportReady: Boolean
  resultStatusDescription: String
  totalRuntime: Int
  withAssembly: Int
}

type MngsWorkflowResults {
  metric_mngs: query_MngsWorkflowResults_metric_mngs
  taxon_hit_results: query_MngsWorkflowResults_taxon_hit_results
  _: query_MngsWorkflowResults__
}

type Mutation {
  DeleteSamples(input: mutationInput_DeleteSamples_input_Input): DeleteSamples
  UpdateSampleNotes(sampleId: String, input: mutationInput_UpdateSampleNotes_input_Input): JSON
  KickoffWGSWorkflow(sampleId: String, input: mutationInput_KickoffWGSWorkflow_input_Input): [mutation_KickoffWGSWorkflow_items]
  KickoffAMRWorkflow(sampleId: String, input: mutationInput_KickoffAMRWorkflow_input_Input): [mutation_KickoffWGSWorkflow_items]
  UpdateMetadata(sampleId: String, input: mutationInput_UpdateMetadata_input_Input): UpdateMetadataReponse
  createUser(archetypes: String, email: String!, institution: String, name: String, role: Int, segments: String, sendActivation: Boolean): CreateUserPayload!
}

type mutation_KickoffWGSWorkflow_items {
  id: String
  status: String
  workflow: String
  wdl_version: String
  executed_at: String
  deprecated: Boolean
  input_error: JSON
  inputs: mutation_KickoffWGSWorkflow_items_inputs
  parsed_cached_results: mutation_KickoffWGSWorkflow_items_parsed_cached_results
  run_finalized: Boolean
}

type mutation_KickoffWGSWorkflow_items_inputs {
  accession_id: JSON
  accession_name: JSON
  taxon_id: JSON
  taxon_name: JSON
  technology: String
  card_version: String
  wildcard_version: String
}

type mutation_KickoffWGSWorkflow_items_parsed_cached_results {
  quality_metrics: mutation_KickoffWGSWorkflow_items_parsed_cached_results_quality_metrics
}

type mutation_KickoffWGSWorkflow_items_parsed_cached_results_quality_metrics {
  total_reads: Int
  qc_percent: Float
  adjusted_remaining_reads: Int
  compression_ratio: Float
  total_ercc_reads: Int
  fraction_subsampled: Float
  insert_size_mean: JSON
  insert_size_standard_deviation: JSON
  percent_remaining: Float
}

input mutationInput_DeleteSamples_input_Input {
  ids: [Int]
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffAMRWorkflow_input_Input {
  inputs_json: mutationInput_KickoffAMRWorkflow_input_inputs_json_Input
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffAMRWorkflow_input_inputs_json_Input {
  start_from_mngs: Boolean
}

input mutationInput_KickoffWGSWorkflow_input_Input {
  inputs_json: mutationInput_KickoffWGSWorkflow_input_inputs_json_Input
  workflow: String
  authenticityToken: String
}

input mutationInput_KickoffWGSWorkflow_input_inputs_json_Input {
  accession_id: String
  accession_name: String
  taxon_id: String
  taxon_name: String
  alignment_config_name: String
  technology: String
}

input mutationInput_UpdateMetadata_input_Input {
  field: String!
  value: String!
  authenticityToken: String!
}

input mutationInput_UpdateSampleNotes_input_Input {
  value: String
  field: String
  authenticityToken: String
}

scalar ObjMap

type Pathogen {
  category: String
  name: String
  taxId: Int
}

type PathogenList {
  citations: [String!]
  createdAt: ISO8601DateTime
  id: ID
  name: String
  pathogens: [Pathogen!]
  updatedAt: ISO8601DateTime
  version: String
}

type PersistedBackground {
  background_id: Int
}

type PipelineData {
  stages: [query_PipelineData_stages_items]
  edges: [query_PipelineData_edges_items]
  status: String
}

type PipelineRun {
  adjustedRemainingReads: Int
  alertSent: Boolean!
  alignmentConfig: AlignmentConfig
  alignmentConfigId: Int
  alignmentConfigName: String
  assembled: Int
  compressionRatio: Float
  createdAt: ISO8601DateTime
  dagVars: String
  deprecated: Boolean
  errorMessage: String
  executedAt: ISO8601DateTime
  finalized: Int
  fractionSubsampled: Float
  id: Int!
  jobStatus: String
  knownUserError: String
  maxInputFragments: Int
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineVersion: String
  qcPercent: Float
  resultsFinalized: Int
  s3OutputPrefix: String
  sampleId: Int
  sfnExecutionArn: String
  subsample: Int
  timeToFinalized: Int
  timeToResultsFinalized: Int
  totalErccReads: Int
  totalReads: Int
  truncated: Int
  unmappedReads: Int
  updatedAt: ISO8601DateTime!
  useTaxonWhitelist: Boolean!
  wdlVersion: String
}

type Project {
  backgroundFlag: Int
  createdAt: ISO8601DateTime!
  creator: User
  daysToKeepSamplePrivate: Int!
  description: String
  id: Int!
  maxInputFragmentsDefault: Int
  name: String!
  publicAccess: Int!
  samples: [Sample!]
  subsampleDefault: Int
  totalSampleCount: Int!
  updatedAt: ISO8601DateTime!
}

type Query {
  AmrDeprecatedResults(sampleId: String): AmrDeprecatedResults
  AmrWorkflowResults(workflowRunId: String): AmrWorkflowResults
  Background(snapshotLinkId: String): Background
  BulkDownload(bulkDownloadId: String): BulkDownload
  ConsensusGenomeWorkflowResults(workflowRunId: String): ConsensusGenomeWorkflowResults
  MngsWorkflowResults(snapshotLinkId: String, sampleId: String, workflowVersionId: String, _backgroundId: String): MngsWorkflowResults
  CoverageVizSummary(snapshotLinkId: String, sampleId: String): [query_CoverageVizSummary_items]
  Pathogens(snapshotLinkId: String, sampleId: String, workflowVersionId: String): [query_Pathogens_items]
  PersistedBackground(projectId: String): PersistedBackground
  PipelineData(sampleId: String, workflowVersionId: String): PipelineData
  Samples(snapshotLinkId: String, sampleId: String, projectId: String): Samples
  Taxons(snapshotLinkId: String, sampleId: String, workflowVersionId: String): [query_Taxons_items]
  TaxonDist(backgroundId: String, taxonId: String): TaxonDist
  UserBlastAnnotations(sampleId: String, workflowVersionId: String): [query_UserBlastAnnotations_items]
  ValidateUserCanDeleteObjects(input: queryInput_ValidateUserCanDeleteObjects_input_Input): ValidateUserCanDeleteObjects
  ZipLink(workflowRunId: String): ZipLink
  appConfig(id: ID!): AppConfig
  pathogenList(version: String): PathogenList!
  project(id: Int!): Project!
  sample(sampleId: Int!): Sample!
  sampleReadsStats(sampleIds: [String!]!): SampleReadsStatsList!
  samplesList(annotations: [Annotation!], basic: Boolean, domain: String, hostIds: [Int!], limit: Int, listAllIds: Boolean, location: String, locationV2: [String!], offset: Int, orderBy: String, orderDir: String, projectId: Int, requestedSampleIds: [Int!], sampleIds: [Int!], searchString: String, taxIds: [Int!], taxLevels: [String!], thresholdFilterInfo: String, time: [String!], tissue: [String!], visibility: [String!], workflow: String): SampleList!
  user(archetypes: String!, email: String!, institution: String!, name: String!, role: Int!, segments: String!): User!
  GraphQLFederationVersion: GraphQLFederationVersion
}

type query_AmrWorkflowResults_quality_metrics {
  total_reads: Int
  qc_percent: Float
  adjusted_remaining_reads: Int
  compression_ratio: Float
  total_ercc_reads: Int
  fraction_subsampled: Float
  insert_size_mean: Int
  insert_size_standard_deviation: Float
  percent_remaining: Float
}

type query_AmrWorkflowResults_report_table_data_items {
  drug_class: String
  gene: String
  gene_id: String
  gene_family: String
  high_level_drug_class: String
  mechanism: String
  model: String
  contigs: String
  cutoff: String
  contig_coverage_breadth: String
  contig_percent_id: String
  reads: String
  rpm: Float
  read_coverage_breadth: String
  read_coverage_depth: String
  dpm: Float
  read_species: String
  contig_species: String
  aro_accession: String
}

type query_Background_other_backgrounds_items {
  id: Int
  name: String
  created_at: String
  updated_at: String
  description: String
  public_access: Int
  ready: Int
  user_id: Int
  mass_normalized: Boolean
}

type query_BulkDownload_bulk_download {
  id: Int
  params_json: String
  download_type: String
  status: String
  error_message: JSON
  user_id: Int
  created_at: String
  updated_at: String
  progress: Float
  ecs_task_arn: JSON
  output_file_size: Int
  description: JSON
  deleted_at: JSON
  analysis_type: String
  analysis_count: Int
  num_samples: Int
  download_name: String
  file_size: String
  user_name: String
  execution_type: String
  log_url: JSON
  params: query_BulkDownload_bulk_download_params
  pipeline_runs: [JSON]
  workflow_runs: [JSON]
  presigned_output_url: String
}

type query_BulkDownload_bulk_download_params {
  background: query_BulkDownload_bulk_download_params_background
}

type query_BulkDownload_bulk_download_params_background {
  value: Int
  displayName: String
}

type query_BulkDownload_download_type {
  type: String
  display_name: String
  description: String
  category: String
  execution_type: String
  fields: [query_BulkDownload_download_type_fields_items]
  file_type_display: String
  workflows: [String]
}

type query_BulkDownload_download_type_fields_items {
  display_name: String
  type: String
}

type query_ConsensusGenomeWorkflowResults_metric_consensus_genome {
  ercc_mapped_reads: Int
  mapped_reads: Int
  n_actg: Int
  n_ambiguous: Int
  n_missing: Int
  ref_snps: Int
  total_reads: Int
  percent_identity: Float
  gc_percent: Float
  percent_genome_called: Float
  reference_genome_length: Int
  coverage_viz: query_ConsensusGenomeWorkflowResults_metric_consensus_genome_coverage_viz
}

type query_ConsensusGenomeWorkflowResults_metric_consensus_genome_coverage_viz {
  total_length: Int
  coverage: [[Float]]
  coverage_bin_size: Float
  max_aligned_length: Int
  coverage_depth: Float
  coverage_breadth: Float
}

type query_ConsensusGenomeWorkflowResults_reference_genome {
  accession_id: String
  accession_name: String
  taxon: query_ConsensusGenomeWorkflowResults_reference_genome_taxon
}

type query_ConsensusGenomeWorkflowResults_reference_genome_taxon {
  id: String
  name: String
}

type query_CoverageVizSummary_items {
  id: Int
  pipeline_id: Int
  name: String
  num_contigs: Int
  num_reads: Int
  score: Int
  coverage_breadth: JSON
  coverage_depth: JSON
}

type query_MngsWorkflowResults__ {
  lineage: [query_MngsWorkflowResults___lineage_items]
}

type query_MngsWorkflowResults___lineage_items {
  tax_id: Int
  name: String
  rank: String
}

type query_MngsWorkflowResults_metric_mngs {
  assembled: Int
  adjusted_remaining_reads: Int
  total_ercc_reads: Int
  num_reads: Int
  num_reads_after_subsampling: Int
  _: query_MngsWorkflowResults_metric_mngs__
}

type query_MngsWorkflowResults_metric_mngs__ {
  has_byteranges: Boolean
}

type query_MngsWorkflowResults_taxon_hit_results {
  taxon_hits: [query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items]
}

type query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items {
  count_type: String
  count: Int
  base_count: Int
  rpm: Float
  bpm: Float
  alignment_length: Float
  percent_identity: Int
  e_value: Float
  tax_id: Int
  _: query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items__
}

type query_MngsWorkflowResults_taxon_hit_results_taxon_hits_items__ {
  bg_mean: Float
  bg_stdev: Float
  bg_mean_mass_normalized: Float
  bg_stdev_mass_normalized: Float
  z_score: Float
  max_z_score: Float
  agg_score: Float
}

type query_Pathogens_items {
  tax_id: JSON
}

type query_PipelineData_edges_items {
  to: query_PipelineData_edges_items_to
  from: query_PipelineData_edges_items_from
  files: [query_PipelineData_edges_items_files_items]
  isIntraStage: Boolean
}

type query_PipelineData_edges_items_files_items {
  displayName: String
  url: JSON
}

type query_PipelineData_edges_items_from {
  stageIndex: Int
  stepIndex: Int
}

type query_PipelineData_edges_items_to {
  stageIndex: Int
  stepIndex: Int
}

type query_PipelineData_stages_items {
  name: String
  steps: [query_PipelineData_stages_items_steps_items]
  jobStatus: String
}

type query_PipelineData_stages_items_steps_items {
  name: String
  description: String
  inputVariables: [query_PipelineData_stages_items_steps_items_inputVariables_items]
  outputFiles: [query_PipelineData_stages_items_steps_items_outputFiles_items]
  inputEdges: [Int]
  outputEdges: [Int]
  status: String
  startTime: JSON
  endTime: JSON
  resources: [JSON]
}

type query_PipelineData_stages_items_steps_items_inputVariables_items {
  name: String
  type: String
}

type query_PipelineData_stages_items_steps_items_outputFiles_items {
  displayName: String
  url: JSON
}

type query_Samples_pipeline_runs_items {
  id: Int
  pipeline_version: String
  created_at: String
  alignment_config_name: String
  assembled: Int
  adjusted_remaining_reads: Int
  total_ercc_reads: Int
  run_finalized: Boolean
}

type query_Samples_project {
  id: Int
  name: String
}

type query_Samples_workflow_runs_items {
  id: Int
  status: String
  workflow: String
  wdl_version: String
  executed_at: String
  deprecated: Boolean
  input_error: JSON
  inputs: query_Samples_workflow_runs_items_inputs
  parsed_cached_results: query_Samples_workflow_runs_items_parsed_cached_results
  run_finalized: Boolean
}

type query_Samples_workflow_runs_items_inputs {
  accession_id: String
  accession_name: String
  taxon_id: Int
  taxon_name: String
  technology: String
  alignment_config_name: String
  creation_source: String
}

type query_Samples_workflow_runs_items_parsed_cached_results {
  coverage_viz: query_Samples_workflow_runs_items_parsed_cached_results_coverage_viz
  quality_metrics: query_Samples_workflow_runs_items_parsed_cached_results_quality_metrics
  taxon_info: query_Samples_workflow_runs_items_parsed_cached_results_taxon_info
}

type query_Samples_workflow_runs_items_parsed_cached_results_coverage_viz {
  coverage_breadth: Float
  coverage_depth: Float
  max_aligned_length: Int
  total_length: Int
}

type query_Samples_workflow_runs_items_parsed_cached_results_quality_metrics {
  ercc_mapped_reads: Int
  mapped_reads: Int
  n_actg: Int
  n_ambiguous: Int
  n_missing: Int
  ref_snps: Int
  total_reads: Int
  percent_identity: Float
  gc_percent: Float
  percent_genome_called: Float
  reference_genome_length: Int
}

type query_Samples_workflow_runs_items_parsed_cached_results_taxon_info {
  accession_id: String
  accession_name: String
  taxon_id: Int
  taxon_name: String
}

type query_TaxonDist_merged_NT_NR {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_TaxonDist_NR {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_TaxonDist_NT {
  tax_level: Int
  mean: Float
  stdev: Float
  rpm_list: [Float]
}

type query_Taxons_items {
  tax_id: JSON
  tax_id_genus: JSON
  common_name: JSON
  name: JSON
  is_phage: JSON
  level: JSON
  _: query_Taxons_items__
}

type query_Taxons_items__ {
  category: JSON
}

type query_UserBlastAnnotations_items {
  tax_id: JSON
  annotation: JSON
}

input queryInput_ValidateUserCanDeleteObjects_input_Input {
  selectedIds: [Int]
  workflow: String
  authenticityToken: String
}

type Sample {
  alignmentConfigName: String
  basespaceAccessToken: String
  createdAt: ISO8601DateTime
  dagVars: String
  defaultBackgroundId: Int
  defaultPipelineRunId: Int
  details: SampleDetails!
  doNotProcess: Boolean!
  editable: Boolean
  hostGenome: HostGenome
  hostGenomeId: Int
  id: ID!
  initialWorkflow: String!
  maxInputFragments: Int
  name: String!
  pipelineBranch: String
  pipelineCommit: String
  pipelineExecutionStrategy: String
  pipelineRuns: [PipelineRun!]
  privateUntil: ISO8601DateTime
  project: Project
  projectId: Int
  public: Int!
  s3Bowtie2IndexPath: String
  s3PreloadResultPath: String
  s3StarIndexPath: String
  sampleDeletable: Boolean
  sampleNotes: String
  status: String
  subsample: Int
  updatedAt: ISO8601DateTime
  uploadError: String
  uploadedFromBasespace: Int
  useTaxonWhitelist: Boolean!
  user: User
  userId: Int
  webCommit: String
  workflowRuns: [WorkflowRun!]
}

type SampleDetails {
  dbSample: DbSample
  derivedSampleOutput: DerivedSampleOutput
  metadata: SampleMetadata
  mngsRunInfo: MngsRunInfo
  uploader: SampleUploader!
  workflowRunsCountByWorkflow: String
}

type SampleList {
  sampleIds: [Int!]
  samples: [Sample!]!
}

type SampleMetadata {
  collectionDate: String
  collectionLocationV2: String
  nucleotideType: String
  sampleType: String
  waterControl: String
}

type SampleReadsStats {
  initialReads: Int
  name: String
  pipelineVersion: String
  sampleId: ID!
  steps: [SampleSteps!]
  wdlVersion: String
}

type SampleReadsStatsList {
  sampleReadsStats: [SampleReadsStats!]!
}

type Samples {
  name: String
  created_at: String
  updated_at: String
  project_id: Int
  status: String
  host_genome_id: Int
  user_id: Int
  upload_error: JSON
  initial_workflow: String
  project: query_Samples_project
  default_background_id: Int
  default_pipeline_run_id: Int
  editable: Boolean
  pipeline_runs: [query_Samples_pipeline_runs_items]
  workflow_runs: [query_Samples_workflow_runs_items]
}

type SampleSteps {
  name: String
  readsAfter: Int
}

type SampleSummaryStats {
  adjustedRemainingReads: Int
  compressionRatio: Float
  insertSizeMean: Float
  insertSizeStandardDeviation: Float
  lastProcessedAt: ISO8601DateTime
  percentRemaining: Float
  qcPercent: Float
  readsAfterCzidDedup: Int
  readsAfterPriceseq: Int
  readsAfterStar: Int
  readsAfterTrimmomatic: Int
  unmappedReads: Int
}

type SampleUploader {
  id: Int!
  name: String
}

type TaxonDist {
  merged_NT_NR: query_TaxonDist_merged_NT_NR
  NR: query_TaxonDist_NR
  NT: query_TaxonDist_NT
}

type UpdateMetadataReponse {
  status: String
  message: String
}

type User {
  archetypes: String!
  createdByUserId: BigInt!
  email: String!
  id: ID!
  institution: String!
  name: String!
  role: Int!
  segments: String!
}

type ValidateUserCanDeleteObjects {
  validIds: [Int]!
  invalidSampleNames: [String]!
  error: String
}

type WorkflowRun {
  cachedResults: String
  createdAt: ISO8601DateTime!
  deprecated: Boolean!
  errorMessage: String
  executedAt: ISO8601DateTime
  inputsJson: String
  rerunFrom: Int
  s3OutputPrefix: String
  sample: Sample
  sampleId: Int
  sfnExecutionArn: String
  status: String!
  timeToFinalized: Int
  updatedAt: ISO8601DateTime!
  wdlVersion: String
  workflow: String!
}

type ZipLink {
  url: String
  error: String
}

