# Shared variables using Docker x- extension and YAML merging syntax. IMPORTANT
# NOTE: Unit tests in Github Actions currently run outside of Docker, so any environment
# setup here may need to be reproduced in check.yml.

x-web-variables: &web-variables
  ? SAMPLES_BUCKET_NAME=idseq-samples-development
  ? SAMPLES_BUCKET_NAME_V1=czi-infectious-disease-development-samples
  ? S3_DATABASE_BUCKET=idseq-public-references
  ? S3_WORKFLOWS_BUCKET=idseq-workflows
  ? S3_AEGEA_ECS_EXECUTE_BUCKET=aegea-ecs-execute-development
  ? ES_ADDRESS=http://elasticsearch:9200
  ? AIRTABLE_API_KEY
  ? AIRTABLE_BASE_ID
  ? AUTH_TOKEN_SECRET
  ? BASESPACE_CLIENT_ID
  ? BASESPACE_CLIENT_SECRET
  ? BASESPACE_OAUTH_REDIRECT_URI
  ? CLI_UPLOAD_ROLE_ARN
  ? GIT_RELEASE_SHA
  ? ID_SEQ_ENVS_THAT_CAN_SCALE
  ? LOCATION_IQ_API_KEY
  ? MAPTILER_API_KEY
  ? RACK_ENV
  ? RAILS_ENV
  ? SEGMENT_JS_ID
  ? SEGMENT_RUBY_ID
  ? SENTRY_DSN_BACKEND
  ? SENTRY_DSN_FRONTEND
  ? SERVER_DOMAIN
  ? SMTP_PASSWORD
  ? SMTP_USER
  ? HEATMAP_ES_ADDRESS=http://heatmap-elasticsearch:9200

x-auth0-variables: &auth0-variables
  ? AUTH0_CLIENT_ID
  ? AUTH0_CLIENT_SECRET
  ? AUTH0_CONNECTION
  ? AUTH0_DOMAIN
  ? AUTH0_MANAGEMENT_CLIENT_ID
  ? AUTH0_MANAGEMENT_CLIENT_SECRET
  ? AUTH0_MANAGEMENT_DOMAIN

x-aws-variables: &aws-variables
  ? AWS_ACCESS_KEY_ID
  ? AWS_SECRET_ACCESS_KEY
  ? AWS_SESSION_TOKEN
  ? AWS_REGION
  ? AWS_DEFAULT_REGION

x-env-variables: &env-variables
  ? ENVIRONMENT
  ? OFFLINE

version: '3.4'
services:
  elasticsearch:
    image: elasticsearch:6.4.3
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - xpack.monitoring.enabled=false
      - xpack.graph.enabled=false
      - xpack.watcher.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker_data/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    platform: linux/amd64
  heatmap-elasticsearch:
    build:
      context: ./docker/open_distro
      dockerfile: Dockerfile
    image: opendistro-for-elasticsearch-no-security
    environment:
      - node.name=heatmap-elasticsearch-node
      - discovery.type=single-node
      - cluster.name=es-docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./docker_data/heatmap_elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 9400:9200
      - 9600:9600
  db:
    image: mysql:5.7
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_DATABASE=idseq_development
    ports:
      - 3306:3306
    command: ['--character-set-server=utf8', '--collation-server=utf8_unicode_ci', '--group_concat_max_len=1073741824', '--show_compatibility_56=ON']
    platform: linux/amd64
    volumes:
      - ./docker_data/db/data:/var/lib/mysql
  redis:
    image: redis:5.0.3
    ports:
      - 6379:6379
    volumes:
      - ./redis-data:/var/lib/redis/data
  web-proxy:
    image: nginx
    volumes:
      - ./docker/etc/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 3000:3000
    depends_on:
      - web
    command:
      ["/usr/sbin/nginx", "-c", "/etc/nginx/nginx.conf"]
  web:
    build:
      context: .
      # See https://testdriven.io/blog/faster-ci-builds-with-docker-cache/
      # and https://docs.docker.com/develop/develop-images/dockerfile_best-practices/#leverage-build-cache#leverage-build-cache
      cache_from:
        - ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ./db:/app/db
      - ./coverage:/app/coverage
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    ports:
      - 3001:3001
    depends_on:
      - db
      - redis
      - elasticsearch
      - heatmap-elasticsearch
      - shoryuken
    environment:
      <<: *web-variables
      <<: *aws-variables
      <<: *auth0-variables
      <<: *env-variables
    command: bash -c "rm -f tmp/pids/server.pid && rails server -b 0.0.0.0 -p 3001"
  resque:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    depends_on:
      - db
      - redis
    environment:
      <<: *web-variables
      <<: *aws-variables
    command: bundle exec "COUNT=5 rake resque:workers"
  resque-scheduler:
    # See config/resque_schedule.yml for usages.
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    depends_on:
      - db
      - redis
    environment:
      <<: *web-variables
      <<: *aws-variables
    command: bundle exec "rake resque:scheduler"
  resque-result-monitor:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    depends_on:
      - db
      - redis
    environment:
      <<: *web-variables
      <<: *aws-variables
    command: bundle exec "rake result_monitor"
  resque-pipeline-monitor:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    depends_on:
      - db
      - redis
    environment:
      <<: *web-variables
      <<: *aws-variables
    command: bundle exec "rake pipeline_monitor"
  shoryuken:
    image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/idseq-web:latest
    platform: linux/amd64
    volumes:
      - .:/app:ro
      - ./log:/app/log
      - ./tmp:/app/tmp
      - ~/.aws:/root/.aws:ro
      - ~/.aws/cli/cache:/root/.aws/cli/cache
    environment:
      <<: *web-variables
      <<: *aws-variables
      SFN_NOTIFICATIONS_QUEUE_ARN:
    command: bundle exec "shoryuken -R -C config/shoryuken.yml"
networks:
  default:
    name: czidnet
    driver: overlay
    attachable: true
