name: Resuable deploy workflow

on: 
  workflow_call:
    inputs:
      source:
        required: true
        type: string
      destination: 
        required: true
        type: string
      force:
        default: false
        required: false
        type: boolean

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    # GITHUB_TOKEN is provided by Actions and can create deployment objects, but these objects won't trigger workflows.
    # A separate token, bound to a specific developer with access to the repo, is required to create GitHub deployment
    # objects that can trigger a deployment workflow. The secret for this token (with repo_deployment scope) is created in
    # https://github.com/settings/tokens and can be managed in https://github.com/chanzuckerberg/idseq/settings/secrets.
    DEBIAN_FRONTEND: noninteractive
    GH_CLI_VERSION: 0.11.1
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
  
jobs:
  production-deploy:
    name: Deploy ${{ inputs.source }} to prod
    if: ${{ inputs.destination == 'prod' }} 
    runs-on: [self-hosted, idseq-prod]
    container: ruby:2.7
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Determine Kernel Version
        run: |
          echo "KERNEL_VERSION=`uname -r`" >> $GITHUB_ENV
      - name: Cache Ruby Dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          # Include kernel version for under-the-hood gem changes:
          key: ${{ runner.os }}-${{ env.KERNEL_VERSION }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.KERNEL_VERSION }}-gems
      - name: Install Ruby Dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Install release script dependencies
        run: |
          apt-get -qq update
          apt-get -qq install -o=Dpkg::Use-Pty=0 --yes jq httpie curl
          curl -OLs https://github.com/cli/cli/releases/download/v${GH_CLI_VERSION}/gh_${GH_CLI_VERSION}_linux_amd64.deb
          dpkg -i gh_${GH_CLI_VERSION}_linux_amd64.deb

          export token=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          export AWS_DEFAULT_REGION=$(curl -s -H "X-aws-ec2-metadata-token: $token" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
          aws configure set default.region $AWS_DEFAULT_REGION
      - name: Deploy ${{ inputs.source }} to production
        if: ${{ !inputs.force }}
        run: bin/deploy_automation/deploy_rev.sh prod origin/${{ inputs.source }}
      - name: Force deploy ${{ inputs.source }} to production
        if: ${{ inputs.force }}
        run: bin/deploy_automation/deploy_rev.sh -f prod origin/${{ inputs.source }}

  development-deploy:
    name: Deploy ${{ inputs.source }} to ${{ inputs.destination }}
    if: ${{ inputs.destination != 'prod' }} 
    runs-on: [self-hosted, idseq-dev]
    container: ruby:2.7
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Determine Kernel Version
        run: |
          echo "KERNEL_VERSION=`uname -r`" >> $GITHUB_ENV
      - name: Cache Ruby Dependencies
        uses: actions/cache@v2
        with:
          path: vendor/bundle
          # Include kernel version for under-the-hood gem changes:
          key: ${{ runner.os }}-${{ env.KERNEL_VERSION }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.KERNEL_VERSION }}-gems
      - name: Install Ruby Dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Install release script dependencies
        run: |
          apt-get -qq update
          apt-get -qq install -o=Dpkg::Use-Pty=0 --yes jq httpie git curl awscli
          curl -OLs https://github.com/cli/cli/releases/download/v${GH_CLI_VERSION}/gh_${GH_CLI_VERSION}_linux_amd64.deb
          dpkg -i gh_${GH_CLI_VERSION}_linux_amd64.deb

          export token=$(curl -s -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
          export AWS_DEFAULT_REGION=$(curl -s -H "X-aws-ec2-metadata-token: $token" http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
          aws configure set default.region $AWS_DEFAULT_REGION
      - name: Deploy ${{ inputs.source }} to ${{ inputs.destination }}
        if: ${{ !inputs.force }}
        run: bin/deploy_automation/deploy_rev.sh ${{ inputs.destination }} origin/${{ inputs.source }}
      - name: Force deploy ${{ inputs.source }} to ${{ inputs.destination }}
        if: ${{ inputs.force }}
        run: bin/deploy_automation/deploy_rev.sh -f ${{ inputs.destination }} origin/${{ inputs.source }}
