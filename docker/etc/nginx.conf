worker_processes auto;
user www-data;

daemon off;
error_log  /dev/stderr;
pid /var/run/nginx.pid;

events {
  worker_connections 768; # increase if you have lots of clients
  accept_mutex on; # set to 'on' if nginx worker_processes > 1
  use epoll; # to enable for Linux 2.6+
}

http {
  include /etc/nginx/mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  log_format custom 'nginx - $remote_addr - [$time_local] '
                             '"$request" $status $body_bytes_sent '
                             '"$http_referer" "$http_user_agent"'
                             ' rt=$request_time urt=$upstream_response_time';
  access_log /dev/stdout custom;
  sendfile on;

  server {
    listen 3000 deferred;
    client_max_body_size 4G;
    resolver 127.0.0.11 valid=1s;
    proxy_read_timeout 300;
    proxy_connect_timeout 300;
    proxy_send_timeout 300;

    # Make sure we can buffer more data when proxying
    proxy_busy_buffers_size   512k;
    proxy_buffers   8 512k;
    proxy_buffer_size   256k;

    keepalive_timeout 60;

    location / {
      set $rails web;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://$rails:3001;
    }

    location /graphqlfed {
      set $gql gql;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;
      proxy_pass http://$gql:4444/graphql;
    }

  }
}

